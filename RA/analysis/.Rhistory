newdata<-data.frame(data1[match(rownames(data2),rownames(data1)),],data2)
colnames(newdata)
pheno=c(phen1,phen2)
pheno
phen2=c(rep("RA-CD4+",12),rep("HP-CD4+",12))
pheno=c(phen1,phen2)
output="RA.CD4.pdf"
output="RA.CD4.pdf"
rlt<-PCAPlot(data=t(newdata),pheno,output,multifigure=T)
rlt<-PCAPlot(data=t(na.omit(newdata)),pheno,output,multifigure=T)
getwd()
data=t(na.omit(newdata))
pca <- prcomp(data,center=T,scale = F)  # Here, input file: row is individual and column is variable
plot((pca$sdev[1:10])^2,type="o",xaxt="n",ylab="Variances",xlab="Principle Components",col="red",lwd=2)
axis(1,at=0:10,labels=paste("PC",0:10,sep=""))
var<-c()
for(i in 1:length(pca$sdev)){var[i]<-sum((pca$sdev[1:i])^2)/sum((pca$sdev)^2)}
plot(var,ylab="total variance",xlab="number of principle components",lwd=2,type="l")
abline(h=0.8,col="grey",lty=2)
abline(v=which(var>0.8)[1],col="grey",lty=2)
scores <- data.frame(pheno, pca$x[,1:3])
col = as.numeric(as.factor(pheno))
plot(x=scores$PC1,y=scores$PC2, xlim=c(min(scores$PC1),max(scores$PC1)),ylim=c(min(scores$PC2),max(scores$PC2)),type="n",xlab="PC1",ylab="PC2")
for(i in 1:length(scores$PC1)){
points(scores$PC1[i],scores$PC2[i],pch=as.numeric(as.factor(pheno))[i],col=col[i],cex=0.8,lwd=2)
}
legend("bottomright",legend=names(table(pheno)),pch=1:length(table(pheno)),col=1:length(table(pheno)),bty="n")
plot(x=scores$PC1,y=scores$PC2, xlim=c(min(scores$PC1),max(scores$PC1)),ylim=c(min(scores$PC2),max(scores$PC2)),type="n",xlab="PC1",ylab="PC2")
for(i in 1:length(scores$PC1)){
points(scores$PC1[i],scores$PC2[i],pch=as.numeric(as.factor(pheno))[i],col=col[i],cex=0.8,lwd=2)
}
legend("bottomright",legend=names(table(pheno)),pch=1:length(table(pheno)),col=1:length(table(pheno)),bty="n")
legend("topright",legend=names(table(pheno)),pch=1:length(table(pheno)),col=1:length(table(pheno)),bty="n")
legend("topleft",legend=names(table(pheno)),pch=1:length(table(pheno)),col=1:length(table(pheno)),bty="n")
plot(x=scores$PC1,y=scores$PC2, xlim=c(min(scores$PC1),max(scores$PC1)),ylim=c(min(scores$PC2),max(scores$PC2)),type="n",xlab="PC1",ylab="PC2")
for(i in 1:length(scores$PC1)){
points(scores$PC1[i],scores$PC2[i],pch=as.numeric(as.factor(pheno))[i],col=col[i],cex=0.8,lwd=2)
}
legend("topleft",legend=names(table(pheno)),pch=1:length(table(pheno)),col=1:length(table(pheno)),bty="n")
points(scores$PC1[i],scores$PC2[i],pch=as.numeric(as.factor(pheno))[i],col=col[i],cex=1.2,lwd=2)
points(scores$PC1[i],scores$PC2[i],pch=as.numeric(as.factor(pheno))[i],col=col[i],cex=1.2,lwd=4)
plot(x=scores$PC1,y=scores$PC2, xlim=c(min(scores$PC1),max(scores$PC1)),ylim=c(min(scores$PC2),max(scores$PC2)),type="n",xlab="PC1",ylab="PC2")
for(i in 1:length(scores$PC1)){
points(scores$PC1[i],scores$PC2[i],pch=as.numeric(as.factor(pheno))[i],col=col[i],cex=1.2,lwd=4)
}
legend("topleft",legend=names(table(pheno)),pch=1:length(table(pheno)),col=1:length(table(pheno)),bty="n")
legend("topleft",legend=names(table(pheno)),pch=1:length(table(pheno)),col=1:length(table(pheno)),bty="n",cex=1.2)
plot(x=scores$PC1,y=scores$PC2, xlim=c(min(scores$PC1),max(scores$PC1)),ylim=c(min(scores$PC2),max(scores$PC2)),type="n",xlab="PC1",ylab="PC2")
for(i in 1:length(scores$PC1)){
points(scores$PC1[i],scores$PC2[i],pch=as.numeric(as.factor(pheno))[i],col=col[i],cex=1.2,lwd=4)
}
legend("topleft",legend=names(table(pheno)),pch=1:length(table(pheno)),col=1:length(table(pheno)),bty="n",cex=1.2)
legend("topleft",legend=names(table(pheno)),pch=1:length(table(pheno)),col=1:length(table(pheno)),bty="n",cex=1.2,lwd=4)
plot(x=scores$PC1,y=scores$PC2, xlim=c(min(scores$PC1),max(scores$PC1)),ylim=c(min(scores$PC2),max(scores$PC2)),type="n",xlab="PC1",ylab="PC2")
for(i in 1:length(scores$PC1)){
points(scores$PC1[i],scores$PC2[i],pch=as.numeric(as.factor(pheno))[i],col=col[i],cex=1.2,lwd=4)
}
legend("topleft",legend=names(table(pheno)),pch=1:length(table(pheno)),col=1:length(table(pheno)),bty="n",cex=1.2)
plot(x=scores$PC1,y=scores$PC2, xlim=c(min(scores$PC1),max(scores$PC1)),ylim=c(min(scores$PC2),max(scores$PC2)),type="n",xlab="PC1",ylab="PC2")
for(i in 1:length(scores$PC1)){
points(scores$PC1[i],scores$PC2[i],pch=as.numeric(as.factor(pheno))[i],col=col[i],cex=1.2,lwd=4)
}
legend("topleft",legend=names(table(pheno)),pch=1:length(table(pheno)),col=1:length(table(pheno)),bty="n",cex=1.2)
plot(x=scores$PC1,y=scores$PC2, xlim=c(min(scores$PC1),max(scores$PC1)),ylim=c(min(scores$PC2),max(scores$PC2)),type="n",xlab="PC1",ylab="PC2")
for(i in 1:length(scores$PC1)){
points(scores$PC1[i],scores$PC2[i],pch=as.numeric(as.factor(pheno))[i],col=col[i],cex=1.2,lwd=4)
}
legend("topleft",legend=names(table(pheno)),pch=1:length(table(pheno)),col=1:length(table(pheno)),bty="n",cex=1)
legend("topleft",legend=names(table(pheno)),pch=1:length(table(pheno)),col=1:length(table(pheno)),bty="n",cex=1)
plot(x=scores$PC1,y=scores$PC2, xlim=c(min(scores$PC1),max(scores$PC1)),ylim=c(min(scores$PC2),max(scores$PC2)),type="n",xlab="PC1",ylab="PC2")
for(i in 1:length(scores$PC1)){
points(scores$PC1[i],scores$PC2[i],pch=as.numeric(as.factor(pheno))[i],col=col[i],cex=1.2,lwd=2)
}
legend("topleft",legend=names(table(pheno)),pch=1:length(table(pheno)),col=1:length(table(pheno)),bty="n",cex=1)
? legend
legend("topleft",legend=names(table(pheno)),pch=1:length(table(pheno)),col=1:length(table(pheno)),bty="n",cex=1,pt.cex=1.2)
plot(x=scores$PC1,y=scores$PC2, xlim=c(min(scores$PC1),max(scores$PC1)),ylim=c(min(scores$PC2),max(scores$PC2)),type="n",xlab="PC1",ylab="PC2")
for(i in 1:length(scores$PC1)){
points(scores$PC1[i],scores$PC2[i],pch=as.numeric(as.factor(pheno))[i],col=col[i],cex=1.2,lwd=2)
}
legend("topleft",legend=names(table(pheno)),pch=1:length(table(pheno)),col=1:length(table(pheno)),bty="n",cex=1,pt.cex=1.2)
legend("topleft",legend=names(table(pheno)),pch=1:length(table(pheno)),col=1:length(table(pheno)),bty="n",cex=1,pt.cex=1.2)
legend("topleft",legend=names(table(pheno)),pch=1:length(table(pheno)),col=1:length(table(pheno)),bty="n",cex=1.2,pt.cex=1.2)
legend("topleft",legend=names(table(pheno)),pch=1:length(table(pheno)),col=1:length(table(pheno)),bty="n",cex=1.1,pt.cex=1.2)
plot(x=scores$PC1,y=scores$PC2, xlim=c(min(scores$PC1),max(scores$PC1)),ylim=c(min(scores$PC2),max(scores$PC2)),type="n",xlab="PC1",ylab="PC2")
for(i in 1:length(scores$PC1)){
points(scores$PC1[i],scores$PC2[i],pch=as.numeric(as.factor(pheno))[i],col=col[i],cex=1.2,lwd=2)
}
legend("topleft",legend=names(table(pheno)),pch=1:length(table(pheno)),col=1:length(table(pheno)),bty="n",cex=1.1,pt.cex=1.2)
legend("topleft",legend=names(table(pheno)),pch=1:length(table(pheno)),col=1:length(table(pheno)),bty="n",cex=1,pt.cex=1.2)
plot(x=scores$PC1,y=scores$PC2, xlim=c(min(scores$PC1),max(scores$PC1)),ylim=c(min(scores$PC2),max(scores$PC2)),type="n",xlab="PC1",ylab="PC2")
for(i in 1:length(scores$PC1)){
points(scores$PC1[i],scores$PC2[i],pch=as.numeric(as.factor(pheno))[i],col=col[i],cex=1.2,lwd=2)
}
legend("topleft",legend=names(table(pheno)),pch=1:length(table(pheno)),col=1:length(table(pheno)),bty="n",cex=1.05,pt.cex=1.2)
phen2=c(rep("CH-RA-CD4+",12),rep("CH-HP-CD4+",12))
pheno=c(phen1,phen2)
plot((pca$sdev[1:10])^2,type="o",xaxt="n",ylab="Variances",xlab="Principle Components",col="red",lwd=2)
axis(1,at=0:10,labels=paste("PC",0:10,sep=""))
var<-c()
for(i in 1:length(pca$sdev)){var[i]<-sum((pca$sdev[1:i])^2)/sum((pca$sdev)^2)}
plot(var,ylab="total variance",xlab="number of principle components",lwd=2,type="l")
abline(h=0.8,col="grey",lty=2)
abline(v=which(var>0.8)[1],col="grey",lty=2)
scores <- data.frame(pheno, pca$x[,1:3])
col = as.numeric(as.factor(pheno))
plot(x=scores$PC1,y=scores$PC2, xlim=c(min(scores$PC1),max(scores$PC1)),ylim=c(min(scores$PC2),max(scores$PC2)),type="n",xlab="PC1",ylab="PC2")
for(i in 1:length(scores$PC1)){
points(scores$PC1[i],scores$PC2[i],pch=as.numeric(as.factor(pheno))[i],col=col[i],cex=1.2,lwd=2)
}
legend("topleft",legend=names(table(pheno)),pch=1:length(table(pheno)),col=1:length(table(pheno)),bty="n",cex=1.05,pt.cex=1.2)
phen2=c(rep("CA-RA-CD4+",12),rep("CA-HP-CD4+",12))
plot(x=scores$PC1,y=scores$PC2, xlim=c(min(scores$PC1),max(scores$PC1)),ylim=c(min(scores$PC2),max(scores$PC2)),type="n",xlab="PC1",ylab="PC2")
for(i in 1:length(scores$PC1)){
points(scores$PC1[i],scores$PC2[i],pch=as.numeric(as.factor(pheno))[i],col=col[i],cex=1.2,lwd=2)
}
legend("topleft",legend=names(table(pheno)),pch=1:length(table(pheno)),col=1:length(table(pheno)),bty="n",cex=1.05,pt.cex=1.2)
phen2=c(rep("CA-RA-CD4+",12),rep("CA-HP-CD4+",12))
pheno=c(phen1,phen2)
plot(x=scores$PC1,y=scores$PC2, xlim=c(min(scores$PC1),max(scores$PC1)),ylim=c(min(scores$PC2),max(scores$PC2)),type="n",xlab="PC1",ylab="PC2")
for(i in 1:length(scores$PC1)){
points(scores$PC1[i],scores$PC2[i],pch=as.numeric(as.factor(pheno))[i],col=col[i],cex=1.2,lwd=2)
}
legend("topleft",legend=names(table(pheno)),pch=1:length(table(pheno)),col=1:length(table(pheno)),bty="n",cex=1.05,pt.cex=1.2)
plot(x=scores$PC1,y=scores$PC2, xlim=c(min(scores$PC1),max(scores$PC1)),ylim=c(min(scores$PC2),max(scores$PC2)),type="n",xlab="PC1",ylab="PC2")
plot((pca$sdev[1:10])^2,type="o",xaxt="n",ylab="Variances",xlab="Principle Components",col="red",lwd=2)
axis(1,at=0:10,labels=paste("PC",0:10,sep=""))
var<-c()
for(i in 1:length(pca$sdev)){var[i]<-sum((pca$sdev[1:i])^2)/sum((pca$sdev)^2)}
plot(var,ylab="total variance",xlab="number of principle components",lwd=2,type="l")
abline(h=0.8,col="grey",lty=2)
abline(v=which(var>0.8)[1],col="grey",lty=2)
scores <- data.frame(pheno, pca$x[,1:3])
col = as.numeric(as.factor(pheno))
plot(x=scores$PC1,y=scores$PC2, xlim=c(min(scores$PC1),max(scores$PC1)),ylim=c(min(scores$PC2),max(scores$PC2)),type="n",xlab="PC1",ylab="PC2")
for(i in 1:length(scores$PC1)){
points(scores$PC1[i],scores$PC2[i],pch=as.numeric(as.factor(pheno))[i],col=col[i],cex=1.2,lwd=2)
}
legend("topleft",legend=names(table(pheno)),pch=1:length(table(pheno)),col=1:length(table(pheno)),bty="n",cex=1.05,pt.cex=1.2)
plot(x=scores$PC1,y=scores$PC3, xlim=c(min(scores$PC1),max(scores$PC1)),ylim=c(min(scores$PC3),max(scores$PC3)),type="n",xlab="PC1",ylab="PC3")
plot(x=scores$PC1,y=scores$PC2, xlim=c(min(scores$PC1),max(scores$PC1)),ylim=c(min(scores$PC2),max(scores$PC2)),type="n",xlab="PC1",ylab="PC2")
for(i in 1:length(scores$PC1)){
points(scores$PC1[i],scores$PC2[i],pch=as.numeric(as.factor(pheno))[i],col=col[i],cex=1.2,lwd=2)
}
legend("topleft",legend=names(table(pheno)),pch=1:length(table(pheno)),col=1:length(table(pheno)),bty="n",cex=1.05,pt.cex=1.2)
legend("topleft",legend=names(table(pheno)),pch=1:length(table(pheno)),col=1:length(table(pheno)),bty="n",cex=1.05,pt.cex=1.2)
plot(x=scores$PC1,y=scores$PC2, xlim=c(min(scores$PC1),max(scores$PC1)),ylim=c(min(scores$PC2),max(scores$PC2)),type="n",xlab="PC1",ylab="PC2")
for(i in 1:length(scores$PC1)){
points(scores$PC1[i],scores$PC2[i],pch=as.numeric(as.factor(pheno))[i],col=col[i],cex=1.2,lwd=2)
}
legend("topleft",legend=names(table(pheno)),pch=1:length(table(pheno)),col=1:length(table(pheno)),bty="n",cex=1.05,pt.cex=1.2)
mydata <- scale(t(data2))
mydata[1:5,1:4]
d <- dist(mydata, method = "euclidean") # distance matrix
fit <- hclust(d, method="ward")
plot(fit) # display dendogram
getwd()
setwd("C:\Users\shicheng\Dropbox\Project\methylation\RA\analysis")
setwd("C:\\Users\\shicheng\\Dropbox\\Project\\methylation\\RA\\analysis")
diff1<-read.table("differential.analysis.outlier1.txt",sep="\t")
head(diff1)
diff1<-read.table("differential.analysis.outlier1.txt",sep="\t",head=T,as.is=T)
0.05/nrow(diff1)
diff1$pvalue<exp(-7)
sum(diff1$pvalue<exp(-7))
diff2<-read.table("differential.analysis.outlier1.txt",sep="\t",head=T,as.is=T)
diff2<-read.table("differential.analysis.outlier2.txt",sep="\t",head=T,as.is=T)
sum(diff2$pvalue<exp(-7))
0.05/450000
sum(diff1$pvalue<exp(-7))
diff3<-read.table("differential.analysis.txt",sep="\t",head=T,as.is=T)
head(diff3)
sum(diff3$pvalue<exp(-7))
diff3$pvalue
exp(-7)
sum(diff1$pvalue<10^(-7))
sum(diff2$pvalue<10^(-7))
sum(diff3$pvalue<10^(-7))
sum(diff1$pvalue<0.05/nrow(diff1))
sum(diff2$pvalue<0.05/nrow(diff2)))
sum(diff3$pvalue<0.05/nrow(diff3))
sum(diff3$pvalue<0.05/nrow(diff3))
diff3$pvalue<0.05/nrow(diff3)
diff<-read.table("differential.analysis.txt",sep="\t",head=T,as.is=T)
sigcpg<-diff[which(diff3$pvalue<0.05/nrow(diff3),]
sigcpg<-diff[which(diff3$pvalue<0.05/nrow(diff3)),]
sigcpg
sigcpg<-diff[which(diff3$pvalue<0.05/nrow(diff3)),1]
sigcpg
match(sigcpg,colnames(mydata))
na.omit(match(sigcpg,colnames(mydata)))
mydata<-mydata[,na.omit(match(sigcpg,colnames(mydata)))]
d <- dist(mydata, method = "euclidean") # distance matrix
fit <- hclust(d, method="ward")
plot(fit) # display dendogram
? dist
? hclust
fit <- hclust(d, method="single")
plot(fit) # display dendogram
fit <- hclust(d, method="complete")
plot(fit) # display dendogram
fit <- hclust(d, method="complete")
fit <- hclust(d, method="average")
plot(fit) # display dendogram
fit <- hclust(d, method="ward")
plot(fit) # display dendogram
fit <- hclust(d, method="ward",hang=-1)
plot(fit,hang=-1) # display dendogram
rownames(mydata)
which(rownames(mydata)=="B4")
which(rownames(mydata)=="B4")
which(rownames(mydata)=="B8")
mydata<-mydata[-c(4,8),]
d <- dist(mydata, method = "euclidean") # distance matrix
fit <- hclust(d, method="ward")
d <- dist(mydata, method = "euclidean") # distance matrix
fit <- hclust(d, method="ward")
mydata <- scale(t(data2))
sigcpg<-diff[which(diff3$pvalue<0.05/nrow(diff3)),1]
mydata<-mydata[,na.omit(match(sigcpg,colnames(mydata)))]
which(rownames(mydata)=="B4")
which(rownames(mydata)=="B8")
mydata<-mydata[-c(4,8),]
dim(mydata)
d <- dist(mydata, method = "euclidean") # distance matrix
fit <- hclust(d, method="ward")
plot(fit,hang=-1) # display dendogram
plot(fit,hang=-1,ylim=c(0,80)) # display dendogram
plot(fit,hang=-1,xlim=c(0,80)) # display dendogram
? plot
plot(fit,hang=-1,xlim=c(0,80)) # display dendogram
plot(fit,xlim=c(0,80)) # display dendogram
library(pvclust)
install.packages("pvclust")
plot(fit,hang=-1) # display dendogram
plot(fit,hang) # display dendogram
plot(fit,hang) # display dendogram
plot(fit,hang) # display dendogram
plot(fit) # display dendogram
? hclust
plot(fit,hang=5) # display dendogram
plot(fit,hang=30) # display dendogram
source('~/.active-rstudio-document', echo=TRUE)
plot(fit,hang=1) # display dendogram
plot(fit,hang=-5) # display dendogram
plot(fit,hang=0) # display dendogram
plot(fit,hang=0.1) # display dendogram
? hclust
plot(fit,hang=0.1) # display dendogram
? hclust
? par
plot(fit,hang=0.1,xaxt="n") # display dendogram
plot(fit,hang=0.1,yaxt="n") # display dendogram
plot(fit,hang=-1,yaxt="n") # display dendogram
axis(2,at=seq(0,80,by=10))
axis(2,at=seq(-1,80,by=10))
plot(fit,hang=-1,yaxt="n") # display dendogram
axis(2,at=seq(-1,80,by=10))
axis(2,at=seq(-1,80,by=20))
plot(fit,hang=-1,yaxt="n") # display dendogram
axis(2,at=seq(-1,80,by=20))
axis(2,at=seq(0,80,by=20))
plot(fit,hang=-1,yaxt="n") # display dendogram
axis(2,at=seq(0,80,by=20))
axis(2,at=seq(0,100,by=20))
plot(fit,hang=-1,yaxt="n",main="") # display dendogram
axis(2,at=seq(0,100,by=20))
plot(fit,hang=-1,yaxt="n",main="",lwd=2) # display dendogram
plot(fit,hang=-1,yaxt="n",main="",lwd=2,labels=c(1:22)) # display dendogram
rownames(fit)
rownames(mydata)
gsub("B","RA",rownames(mydata))
rownames(mydata)
rownames(mydata)=c("RA0010","RA0002","RA0003","RA0005","RA0006","RA0007","RA0009","RA0001","RA0011","RA0012","HP0010","HP0002","HP0003","HP0004","HP0005","HP0006","HP0007","HP0008","HP0009","HP0001","HP0011","HP0012")
d <- dist(mydata, method = "euclidean") # distance matrix
fit <- hclust(d, method="ward")
plot(fit,hang=-1,yaxt="n",main="",lwd=2,labels=c(1:22)) # display dendogram
axis(2,at=seq(0,100,by=20))
plot(fit,hang=-1,yaxt="n",main="",lwd=2) # display dendogram
axis(2,at=seq(0,100,by=20))
plot(fit,hang=-1,yaxt="n",main="",lwd=2,col="blue") # display dendogram
axis(2,at=seq(0,100,by=20))
plot(fit,hang=-1,yaxt="n",main="",lwd=2,col="blue",xlab="") # display dendogram
plot(fit,hang=-1,yaxt="n",main="",lwd=2,col="blue") # display dendogram
axis(2,at=seq(0,100,by=20))
plot(fit,hang=-1,yaxt="n",main="",lwd=2.5,col="blue") # display dendogram
axis(2,at=seq(0,100,by=20))
axis(2,at=seq(0,100,by=20),lwd=2.5)
axis(2,at=seq(0,100,by=20),lwd=2.5,cex=1.2)
plot(fit,hang=-1,yaxt="n",main="",lwd=2.5,col="blue") # display dendogram
axis(2,at=seq(0,100,by=20),lwd=2.5,cex=1.2)
plot(fit,hang=-1,yaxt="n",main="",lwd=2.5,col="blue",cex=1.5) # display dendogram
plot(fit,hang=-1,yaxt="n",main="",lwd=2.5,col="blue",cex=1.25) # display dendogram
axis(2,at=seq(0,100,by=20),lwd=2.5,cex=1.2)
axis(2,at=seq(0,100,by=20),lwd=2.5,cex=1.1)
plot(fit,hang=-1,yaxt="n",main="",lwd=2.5,col="blue",cex=1.25) # display dendogram
plot(fit,hang=-1,yaxt="n",main="",lwd=2.5,col="blue",cex=1.25) # display dendogram
axis(2,at=seq(0,100,by=20),lwd=2.5,cex=1.0)
library(sparcl)
install.packages("sparcl")
library("sparcl")
set.seed(1)
x <- matrix(rnorm(100*20),ncol=20)
y <- c(rep(1,50),rep(2,50))
x[y==1,] <- x[y==1,]+2
# Perform hierarchical clustering
hc <- hclust(dist(x),method="complete")
# Plot
ColorDendrogram(hc,y=y,main="My Simulated Data",branchlength=3)
ColorDendrogram(hc,y=y,main="My Simulated Data",branchlength=3,hang=-1)
ColorDendrogram(hc,y=y,main="My Simulated Data",branchlength=3)
? ColorDendrogram
ColorDendrogram(fit,y=pheno,main="My Simulated Data",branchlength=3)
ColorDendrogram(fit,y=pheno,main="My Simulated Data",branchlength=3)
y
pheno
d <- dist(mydata, method = "euclidean") # distance matrix
fit <- hclust(d, method="ward")
ColorDendrogram(fit,y=pheno,main="My Simulated Data",branchlength=3)
rownames(mydata)
ColorDendrogram(fit,y=c(rep(1,10),rep(2,12)),main="My Simulated Data",branchlength=3)
ColorDendrogram(fit,y=c(rep(1,10),rep(2,12)),main="My Simulated Data",branchlength=4)
ColorDendrogram(fit,y=c(rep(1,10),rep(2,12)),main="My Simulated Data")
? ColorDendrogram
ColorDendrogram(fit,y=c(rep(1,10),rep(2,12)),main="My Simulated Data",branchlength=30)
ColorDendrogram(fit,y=c(rep(1,10),rep(2,12)),branchlength=30)
? ColorDendrogram
ColorDendrogram(fit,y=c(rep(1,10),rep(2,12)),branchlength=30,labels=rownames(mydata))
ColorDendrogram(fit,y=c(rep(1,10),rep(2,12)),branchlength=5,labels=rownames(mydata))
ColorDendrogram(fit,y=c(rep(1,10),rep(2,12)),branchlength=7,labels=rownames(mydata))
ColorDendrogram(fit,y=c(rep(1,10),rep(2,12)),branchlength=9,labels=rownames(mydata))
ColorDendrogram(fit,y=c(rep(1,10),rep(2,12)),branchlength=11,labels=rownames(mydata))
ColorDendrogram(fit,y=c(rep(1,10),rep(2,12)),branchlength=11,labels=rownames(mydata),hang=-1)
ColorDendrogram(fit,y=c(rep(1,10),rep(2,12)),branchlength=11,labels=rownames(mydata),lwd=3)
? ColorDendrogram
ColorDendrogram
plot(fit,hang=-1,yaxt="n",main="",lwd=2.5,col="blue",cex=1.25) # display dendogram
axis(2,at=seq(0,100,by=20),lwd=2.5,cex=1.0)
ColorDendrogram(fit,y=c(rep(1,10),rep(2,12)),branchlength=11,labels=rownames(mydata))
ColorDendrogram(fit,y=c(rep(1,10),rep(2,12)),branchlength=11,labels=rownames(mydata),lwd=5)
ColorDendrogram
ColorDendrogram(hc,y=y,main="My Simulated Data",branchlength=3)
phyl <-as.phylo(hclust(dist(mtcars)))
library(ape)
library(cluster)
install.packges("ape")
install.packages("ape")
install.packages("cluster")
library(cluster)
library("ape")
library("cluster")
data(mtcars)
plot(as.phylo(hclust(dist(mtcars))),type="fan")
phyl <-as.phylo(hclust(dist(mtcars)))
plot(phyl,type="fan", edge.col=c("black", "green")[1+(phyl$edge.length >40) ])
plot(phyl,type="fan", edge.col=c("black", "black", "green")[c(TRUE, FALSE) + 1 + (phyl$edge.length >40) ])
phyl <-as.phylo(hclust(dist(mtcars)))
plot(phyl,type="fan", edge.col=c("black", "green")[1+(phyl$edge.length >40) ])
phyl <-as.phylo(hclust(dist(mtcars)))
plot(phyl,type="fan", edge.col=c("black", "black", "green")[c(TRUE, FALSE) + 1 + (phyl$edge.length >40) ])
hc <- hclust(dist(USArrests[1:5,]), "ave")
dend <- as.dendrogram(hc)
par(mfrow = c(1,2), mar = c(5,2,1,0))
dend <- dend %>%
color_branches(k = 3) %>%
set("branches_lwd", c(2,1,2)) %>%
set("branches_lty", c(1,2,1))
plot(dend)
labels_colors(dend)  <- get_leaves_branches_col(dend)
plot(dend)
dend <- dend
color_branches(k = 3)
set("branches_lwd", c(2,1,2))
set("branches_lty", c(1,2,1))
plot(fit,hang=-1,yaxt="n",main="",lwd=2.5,col="blue",cex=1.25) # display dendogram
axis(2,at=seq(0,100,by=20),lwd=2.5,cex=1.0)
fit <- hclust(d, method="ward")
plot(fit,hang=-1,yaxt="n",main="",lwd=2.5,col="blue",cex=1.25) # display dendogram
axis(2,at=seq(0,100,by=20),lwd=2.5,cex=1.0)
heatmap(mydata)
heatmap(mydata,col="heatmap")
heatmap(mydata,col="rainbow")
heatmap(mydata,col=rainbow)
? heatmap
heatmap.2
? heatmap.2
? heatmap
heatmap.2(mydata,col=topo.colors(16))
heatmap(mydata,col=topo.colors(16))
heatmap(mydata,col=redgreen(10))
heatmap(mydata,col=redblue(10))
? col
heatmap(mydata,col=redgreen(50))
library(gplots)
heatmap(mydata,col=redgreen(50))
heatmap(mydata,col=redgreen(5))
sigcpg<-diff[which(diff3$pvalue<0.005/nrow(diff3)),1]
mydata<-mydata[,na.omit(match(sigcpg,colnames(mydata)))]
heatmap(mydata,col=redgreen(5))
sigcpg<-diff[which(diff3$pvalue<0.0005/nrow(diff3)),1]
mydata<-mydata[,na.omit(match(sigcpg,colnames(mydata)))]
heatmap(mydata,col=redgreen(5))
sigcpg<-diff[which(diff3$pvalue<0.005/nrow(diff3)),1]
mydata<-mydata[,na.omit(match(sigcpg,colnames(mydata)))]
heatmap(mydata,col=redgreen(5))
mydata <- scale(t(data2))
sigcpg<-diff[which(diff3$pvalue<0.005/nrow(diff3)),1]
mydata1<-mydata[,na.omit(match(sigcpg,colnames(mydata)))]
heatmap(mydata1,col=redgreen(5))
which(rownames(mydata1)=="B4")
which(rownames(mydata1)=="B8")
mydata1<-mydata[-c(4,8),]
rownames(mydata1)=c("RA0010","RA0002","RA0003","RA0005","RA0006","RA0007","RA0009","RA0001","RA0011","RA0012","HP0010","HP0002","HP0003","HP0004","HP0005","HP0006","HP0007","HP0008","HP0009","HP0001","HP0011","HP0012")
heatmap(mydata1,col=redgreen(5))
sigcpg<-diff[which(diff3$pvalue<0.005/nrow(diff3)),1]
mydata1<-mydata[,na.omit(match(sigcpg,colnames(mydata)))]
dim(mydata1)
which(rownames(mydata1)=="B4")
which(rownames(mydata1)=="B8")
mydata1<-mydata[-c(4,8),]
mydata1
mydata1[1:3,1:3]
heatmap(mydata1,col=redgreen(2))
mydata <- scale(t(data2))
sigcpg<-diff[which(diff3$pvalue<0.005/nrow(diff3)),1]
mydata1<-mydata[,na.omit(match(sigcpg,colnames(mydata)))]
which(rownames(mydata1)=="B4")
which(rownames(mydata1)=="B8")
mydata1<-mydata[-c(4,8),]
dim(mydata1)
sigcpg<-diff[which(diff$pvalue<0.005/nrow(diff)),1]
mydata1<-mydata[,na.omit(match(sigcpg,colnames(mydata)))]
which(rownames(mydata1)=="B4")
which(rownames(mydata1)=="B8")
mydata1<-mydata[-c(4,8),]
dim(mydata1)
diff$pvalue
nrow(diff)
sigcpg<-diff[which(diff$pvalue<0.005/nrow(diff)),1]
length(sigcpg)
mydata1<-mydata[,na.omit(match(sigcpg,colnames(mydata)))]
which(rownames(mydata1)=="B4")
which(rownames(mydata1)=="B8")
mydata1<-mydata1[-c(4,8),]
rownames(mydata1)=c("RA0010","RA0002","RA0003","RA0005","RA0006","RA0007","RA0009","RA0001","RA0011","RA0012","HP0010","HP0002","HP0003","HP0004","HP0005","HP0006","HP0007","HP0008","HP0009","HP0001","HP0011","HP0012")
heatmap(mydata1,col=redgreen(2))
heatmap(mydata1,col=redgreen(2))
heatmap(mydata1,col=redgreen(3))
heatmap(mydata1,col=redgreen(4))
heatmap(mydata1,col=redgreen(5))
heatmap(mydata1,col=redgreen(6))
heatmap(mydata1,col=redgreen(7))
heatmap(mydata1,col=redgreen(8))
heatmap(mydata1,col=redgreen(7))
heatmap(mydata1,col=redgreen(9))
heatmap(mydata1,col=redgreen(10))
data2=myNorm$beta
phen2=c(rep("CA-RA-CD4+",12),rep("CA-HP-CD4+",12))
data=data2
pheno=phen2
pca <- prcomp(data,center=T,scale = F)  # Here, input file: row is individual and column is variable
plot((pca$sdev[1:10])^2,type="o",xaxt="n",ylab="Variances",xlab="Principle Components",col="red",lwd=2)
data[1:5,1:4]
for(i in 1:length(pca$sdev)){var[i]<-sum((pca$sdev[1:i])^2)/sum((pca$sdev)^2)}
plot(var,ylab="total variance",xlab="number of principle components",lwd=2,type="l")
abline(h=0.8,col="grey",lty=2)
abline(v=which(var>0.8)[1],col="grey",lty=2)
dim(data2)
data=t(data2)
pheno=phen2
pca <- prcomp(data,center=T,scale = F)  # Here, input file: row is individual and column is variable
outputfile=paste(output,".pdf",sep="")
dev.off()
plot((pca$sdev[1:10])^2,type="o",xaxt="n",ylab="Variances",xlab="Principle Components",col="red",lwd=2)
axis(1,at=0:10,labels=paste("PC",0:10,sep=""))
var<-c()
for(i in 1:length(pca$sdev)){var[i]<-sum((pca$sdev[1:i])^2)/sum((pca$sdev)^2)}
plot(var,ylab="total variance",xlab="number of principle components",lwd=2,type="l")
abline(h=0.8,col="grey",lty=2)
abline(v=which(var>0.8)[1],col="grey",lty=2)
var
0.439-0.299
var<-c()
for(i in 1:length(pca$sdev)){var[i]<-sum((pca$sdev[1:i])^2)/sum((pca$sdev)^2)}
plot(var,ylab="total variance",xlab="number of principle components",lwd=2,type="l")
abline(h=0.8,col="grey",lty=2)
abline(v=which(var>0.8)[1],col="grey",lty=2)
scores <- data.frame(pheno, pca$x[,1:3])
plot(var,ylab="Total variance",xlab="Number of principle components",lwd=2,type="l")
abline(h=0.8,col="grey",lty=2)
abline(v=which(var>0.8)[1],col="grey",lty=2)
scores <- data.frame(pheno, pca$x[,1:3])
abline(v=which(var>0.8)[1],col="grey",lty=2,lwd=2)
plot(var,ylab="Total variance",xlab="Number of principle components",lwd=3,type="l",col="green")
plot(var,ylab="Total variance",xlab="Number of principle components",lwd=3,type="l",col="red")
abline(h=0.8,col="grey",lty=2,lwd=2)
abline(v=which(var>0.8)[1],col="grey",lty=2,lwd=2)
scores <- data.frame(pheno, pca$x[,1:3])
810+392
1202/435226
setwd("C:\\Users\\shicheng\\Dropbox\\Project\\methylation\\RA\\analysis\\paperOARA\\")
d1<-read.table("DMG.txt")
head(d1)
setwd("C:\\Users\\shicheng\\Dropbox\\Project\\methylation\\RA\\analysis\\")
setwd("C:\\Users\\shicheng\\Dropbox\\Project\\methylation\\RA\\analysis\\")
d2<-read.table("hyper.gene.txt")
d3<-read.table("hypo.gene.txt")
d2<-rbind(d2,d3)
head(d2)
match(d1[,1],d2[,1])
na.omit(match(d1[,1],d2[,1]))
length(na.omit(match(d1[,1],d2[,1])))
