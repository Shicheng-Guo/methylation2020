legend("topright",c(title1,title2),col=c("red","black"),lty=c(1,2),lwd=2,cex=0.5)
write.table(t(node1),file="nodeofbin.txt",sep="\t",col.names=F,row.names=c(paste(cnvgene,".case",sep="")),append=T)
write.table(t(node2),file="nodeofbin.txt",sep="\t",col.names=F,row.names=c(paste(cnvgene,".control",sep="")),append=T)
}
dev.off()
gender<-SSc$gender
age<-SSc$age
sample<-SSc$sample
data<-data.frame(sample,gender,age,dat)
write.table(data,file="SSc.trim.txt",col.names=NA,row.names=lable,quote=F,sep="\t")
# simulation
#x<-c(rnorm(20,0.5,0.5),rnorm(100,1,0.5))
#hist(SSc[which(SSc[,7]>0.6),7])
#x<-c(rnorm(3000,0.5,0.1),rnorm(10000,1,0.1))
#plot(density(x),ylim=c(0,10),col="red")
#lines(density(rnorm(3000,0.5,0.1)))
#lines(density(rnorm(10000,1,0.1)))
frr<-matrix(NA,100,5)
for (j in 1:2){
# for male
samplesize<-200
choice1<-matrix(NA,2*samplesize,1)
stop=T
while(stop==T){
order1<-sample(1:230,samplesize)
order2<-sample(1:310,samplesize)
if(! any(abs(sort(case_M$age[order1])-sort(control_M$age[order2]))>5)){
tmp<-c(order1,order2)
choice1<-cbind(choice1,tmp)
stop=F
}
}
#for female
samplesize<-590
choice2<-matrix(NA,2*samplesize,1)
stop=T
while(stop==T){
order3<-sample(1:615,samplesize)
order4<-sample(1:695,samplesize)
if(! any(abs(sort(case_F$age[order3])-sort(control_F$age[order4]))>6)){
tmp<-c(order3,order4)
choice2<-cbind(choice2,tmp)
stop=F
}
}
casematch<-rbind(case_M[order1,], case_F[order3,])
controlmatch<-rbind(control_M[order2,], control_F[order4,])
datamatch<-rbind(casematch,controlmatch)
dim(datamatch)
-09
table(datamatch$phenotype)
table(datamatch$rs944289)
prevalence<-12.2/100000
for (i in c(1:5)){
table<-xtabs(~datamatch$phenotype+datamatch[,i+3])
table
or1<-table[2,2]*table[1,1]/(table[1,2]*table[2,1])
or2<-table[2,3]*table[1,1]/(table[1,3]*table[2,1])
or1; or2
#estimate RR from oR
r1<-or1*(1-prevalence+prevalence*or1)   #relative risk(estimated by odds ratios) for hetrozygotes relative to common homozygotes
r2<-or2*(1-prevalence+prevalence*or2)   #relative risk(estimated by odds ratios) for rare homozygotes to common homozygotes
r1; r2
#familial reltaive risk
p<-(2*table[1,3]+table[1,2])/(2*table[1,1]+table[1,2]+2*table[1,3]+table[1,2])   #risk allelefrequency
p
q<-1-p
if(r1<1 & r2<1) {r1<1/r1; r2<-1/r2; p=q; q=1-p;}
lamdi0<-8.48  #overall familial relatve risk
lamdi<-(p*(p*r2+q*r1)^2+q*(p*r1+q)^2)/(p^2*r2+2*p*q*r1+q^2)^2
frr[j,i]<-log(lamdi)/log(lamdi0)
}
}
write.table(frr,file="frr.txt",sep="\t")
getwd()
#!/home/users/jcwang2/software/bin/R
setwd("/home/gsc/Dropbox/Project/Thyroid_prediction_model/code")
load("thyroid.RData")
data$phenotype[data$phenotype==2]<-1
case<-subset(data,phenotype==1)
control<-subset(data,phenotype==0)
case_F<-subset(case,gender==1)
case_M<-subset(case,gender==0)
control_F<-subset(control,gender==1)
control_M<-subset(control,gender==0)
dim(case)
dim(control)
dim(case_F)
dim(control_F)
dim(case_M)
dim(control_M)
range(case_F$age)
range(control_F$age)
range(case_M$age)
range(control_M$age)
frr<-matrix(NA,100,5)
for (j in 1:2){
# for male
samplesize<-200
choice1<-matrix(NA,2*samplesize,1)
stop=T
while(stop==T){
order1<-sample(1:230,samplesize)
order2<-sample(1:310,samplesize)
if(! any(abs(sort(case_M$age[order1])-sort(control_M$age[order2]))>5)){
tmp<-c(order1,order2)
choice1<-cbind(choice1,tmp)
stop=F
}
}
#for female
samplesize<-590
choice2<-matrix(NA,2*samplesize,1)
stop=T
while(stop==T){
order3<-sample(1:615,samplesize)
order4<-sample(1:695,samplesize)
if(! any(abs(sort(case_F$age[order3])-sort(control_F$age[order4]))>6)){
tmp<-c(order3,order4)
choice2<-cbind(choice2,tmp)
stop=F
}
}
casematch<-rbind(case_M[order1,], case_F[order3,])
controlmatch<-rbind(control_M[order2,], control_F[order4,])
datamatch<-rbind(casematch,controlmatch)
dim(datamatch)
-09
table(datamatch$phenotype)
table(datamatch$rs944289)
prevalence<-12.2/100000
for (i in c(1:5)){
table<-xtabs(~datamatch$phenotype+datamatch[,i+3])
table
or1<-table[2,2]*table[1,1]/(table[1,2]*table[2,1])
or2<-table[2,3]*table[1,1]/(table[1,3]*table[2,1])
or1; or2
#estimate RR from oR
r1<-or1*(1-prevalence+prevalence*or1)   #relative risk(estimated by odds ratios) for hetrozygotes relative to common homozygotes
r2<-or2*(1-prevalence+prevalence*or2)   #relative risk(estimated by odds ratios) for rare homozygotes to common homozygotes
r1; r2
#familial reltaive risk
p<-(2*table[1,3]+table[1,2])/(2*table[1,1]+table[1,2]+2*table[1,3]+table[1,2])   #risk allelefrequency
p
q<-1-p
if(r1<1 & r2<1) {r1<1/r1; r2<-1/r2; p=q; q=1-p;}
lamdi0<-8.48  #overall familial relatve risk
lamdi<-(p*(p*r2+q*r1)^2+q*(p*r1+q)^2)/(p^2*r2+2*p*q*r1+q^2)^2
frr[j,i]<-log(lamdi)/log(lamdi0)
}
}
frr
frr[1:2,]
lamdi<-(p*(p*r2+q*r1)^2+q*(p*r1+q)^2)/(p^2*r2+2*p*q*r1+q^2)^2
lamdi
p
q
r1
r2
frr<-matrix(NA,100,5)
for (j in 1:100){
# for male
samplesize<-200
choice1<-matrix(NA,2*samplesize,1)
stop=T
while(stop==T){
order1<-sample(1:230,samplesize)
order2<-sample(1:310,samplesize)
if(! any(abs(sort(case_M$age[order1])-sort(control_M$age[order2]))>5)){
tmp<-c(order1,order2)
choice1<-cbind(choice1,tmp)
stop=F
}
}
#for female
samplesize<-590
choice2<-matrix(NA,2*samplesize,1)
stop=T
while(stop==T){
order3<-sample(1:615,samplesize)
order4<-sample(1:695,samplesize)
if(! any(abs(sort(case_F$age[order3])-sort(control_F$age[order4]))>6)){
tmp<-c(order3,order4)
choice2<-cbind(choice2,tmp)
stop=F
}
}
casematch<-rbind(case_M[order1,], case_F[order3,])
controlmatch<-rbind(control_M[order2,], control_F[order4,])
datamatch<-rbind(casematch,controlmatch)
dim(datamatch)
-09
table(datamatch$phenotype)
table(datamatch$rs944289)
prevalence<-12.2/100000
for (i in c(1:5)){
table<-xtabs(~datamatch$phenotype+datamatch[,i+3])
table
or1<-table[2,2]*table[1,1]/(table[1,2]*table[2,1])
or2<-table[2,3]*table[1,1]/(table[1,3]*table[2,1])
or1; or2
#estimate RR from oR
r1<-or1*(1-prevalence+prevalence*or1)   #relative risk(estimated by odds ratios) for hetrozygotes relative to common homozygotes
r2<-or2*(1-prevalence+prevalence*or2)   #relative risk(estimated by odds ratios) for rare homozygotes to common homozygotes
r1; r2
#familial reltaive risk
p<-(2*table[1,3]+table[1,2])/(2*table[1,1]+table[1,2]+2*table[1,3]+table[1,2])   #risk allelefrequency
p
q<-1-p
if(r1<1 & r2<1) {r1<1/r1; r2<-1/r2; p=q; q=1-p;}
lamdi0<-8.48  #overall familial relatve risk
lamdi<-(p*(p*r2+q*r1)^2+q*(p*r1+q)^2)/(p^2*r2+2*p*q*r1+q^2)^2
frr[j,i]<-log(lamdi)/log(lamdi0)
}
}
write.table(frr,file="frr.txt",sep="\t")
frr
MeanRow(frr)
meanRow(frr)
colMeans(frr)
save(frr,file="frr.RData")
getwd()
hist(frr[,1])
hist(frr[,2])
hist(frr[,3])
hist(frr[,4])
hist(frr[,5])
summary(frr)
error <- qt(0.975,df=length(w1$vals)-1)*sd(w1$vals)/sqrt(length(w1$vals))
error <- qt(0.975,df=length(frr$V1)-1)*sd(frr$V1)/sqrt(length(frr$V1))
frr$V1
colnames(frr)
frr[,V1]
frrV1
error <- qt(0.975,df=length(frr[,1])-1)*sd(frr[,1])/sqrt(length(frr[,1]))
error
i<-1
error <- qt(0.975,df=length(frr[,i])-1)*sd(frr[,i])/sqrt(length(frr[,i]))
x<-round(colMeans,2)
paste((frr[,i]," (", x-error,"-", x+error,")"))
error <- qt(0.975,df=length(frr[,i])-1)*sd(frr[,i])/sqrt(length(frr[,i]))
x<-round(colMeans(frr[,i]),2)
colMeans(frr[,i])
colMeans(frr[,i])
colMeans(frr[,i])
colMeans(frr[,i]))
for (i in 1:5){
i<-1
error <- qt(0.975,df=length(frr[,i])-1)*sd(frr[,i])/sqrt(length(frr[,i]))
x<-round(colMeans(frr[,i]),2)
paste((x[i]," (", x[i]-error,"-", x[i]+error,")"))
}
paste((x[i]," (", x[i]-error,"-", x[i]+error,")"),sep="")
paste(x[i]," (", x[i]-error, "-", x[i]+error,")",sep="")
x<-round(colMeans(frr[,i]),2)
x<-round(colMeans(frr),2)
paste(x[i]," (", x[i]-error, "-", x[i]+error,")",sep="")
error<-round(error,2)
paste(x[i]," (", x[i]-error, "-", x[i]+error,")",sep="")
error
error <- qt(0.975,df=length(frr[,i])-1)*sd(frr[,i])/sqrt(length(frr[,i]))
error
x<-round(colMeans(frr),2)
error<-round(error,2)
paste(x[i]," (", x[i]-error, "-", x[i]+error,")",sep="")
for (i in 1:5){
error <- qt(0.975,df=length(frr[,i])-1)*sd(frr[,i])/sqrt(length(frr[,i]))
x<-round(colMeans(frr),2)
error<-round(error,2)
paste(x[i]," (", x[i]-error, "-", x[i]+error,")",sep="")
}
result<-vector()
for (i in 1:5){
error <- qt(0.975,df=length(frr[,i])-1)*sd(frr[,i])/sqrt(length(frr[,i]))
x<-round(colMeans(frr),2)
error<-round(error,2)
result[i]<-paste(x[i]," (", x[i]-error, "-", x[i]+error,")",sep="")
}
result
result<-vector()
for (i in 1:5){
error <- qt(0.975,df=length(frr[,i])-1)*sd(frr[,i])/sqrt(length(frr[,i]))
x<-round(colMeans(frr),3)
error<-round(error,3)
result[i]<-paste(x[i]," (", x[i]-error, "-", x[i]+error,")",sep="")
}
result
library(caret)
library(pROC)
data(iris)
# Make this two class classification.
iris <- iris[iris$Species == "virginica" | iris$Species == "versicolor", ]
iris$Species <- factor(iris$Species)  # setosa should be removed from factor
levels(iris$Species)
# Get train and test datasets.
# I'm making train set very small intentionally so that we get some wrong classification
# results. This will give ROC graph some curves.
samples <- sample(NROW(iris), NROW(iris) * .5)
data.train <- iris[samples, ]
data.test <- iris[-samples, ]
# Random forest
forest.model <- train(Species ~., data.train)
forest.model
# Prediction.
result.predicted.prob <- predict(forest.model, data.test, type="prob")
# Draw ROC curve.
result.roc <- roc(data.test$Species, result.predicted.prob$versicolor)
plot(result.roc, print.thres="best", print.thres.best.method="closest.topleft")
# Get some more values.
result.coords <- coords(result.roc, "best", best.method="closest.topleft", ret=c("threshold", "accuracy"))
print(result.coords)
# Make prediction using the best top-left cutoff.
result.predicted.label <- factor(ifelse(result.predicted.prob[,1] > result.coords[1], "versicolor", "virginica"))
xtabs(~  result.predicted.label + data.test$Species)
library(caret)
library(pROC)
install.packages(pROC)
install.packages("pROC")
library(pROC)
data(iris)
iris <- iris[iris$Species == "virginica" | iris$Species == "versicolor", ]
iris$Species <- factor(iris$Species)  # setosa should be removed from factor
levels(iris$Species)
# Get train and test datasets.
# I'm making train set very small intentionally so that we get some wrong classification
# results. This will give ROC graph some curves.
samples <- sample(NROW(iris), NROW(iris) * .5)
data.train <- iris[samples, ]
data.test <- iris[-samples, ]
# Random forest
forest.model <- train(Species ~., data.train)
forest.model
# Prediction.
result.predicted.prob <- predict(forest.model, data.test, type="prob")
# Draw ROC curve.
result.roc <- roc(data.test$Species, result.predicted.prob$versicolor)
plot(result.roc, print.thres="best", print.thres.best.method="closest.topleft")
# Get some more values.
result.coords <- coords(result.roc, "best", best.method="closest.topleft", ret=c("threshold", "accuracy"))
print(result.coords)
# Make prediction using the best top-left cutoff.
result.predicted.label <- factor(ifelse(result.predicted.prob[,1] > result.coords[1], "versicolor", "virginica"))
xtabs(~  result.predicted.label + data.test$Species)
colnames(data)
frr
result
result<-vector()
for (i in 1:5){
error1 <- qt(0.975,df=length(frr[,i])-1)*sd(frr[,i])/sqrt(length(frr[,i]))
x<-round(colMeans(frr),5)*100
error2<-round(error1,5)*100
result[i]<-paste(x[i]," (", x[i]-error2, "-", x[i]+error2,")",sep="")
}
result
write.table(result,file="frr.txt",sep="\t")
getwd()
setwd("/home/gsc/Dropbox/Project/APCmeta/R/tcga")
load("LUAD.Rdata")
load("LUSC.Rdata")
luad<-LUAD4
lusc<-LUSC4
dim(lusc[which(lusc$casecontrol=="01"),])
dim(luad[which(luad$casecontrol=="01"),])
colnames(luad)
cor<-matrix(NA,6,6)
for (i in 1:6){
for (j in 1:6){
cor[i,j]<-cor(luad[,i],luad[,j])
}
}
cor<-matrix(NA,6,6)
for (i in 1:6){
for (j in 1:6){
cor[i,j]<-cor(luad[,i+6],luad[,j+6])
}
}
cor
luad[,10]
luad[,11]
#for correlation of each cpg site
cor<-matrix(NA,6,6)
for (i in 1:6){
for (j in 1:6){
cor[i,j]<-cor(luad[,i+6],luad[,j+6])
}
}
cor
cor(luad[,10],luad[,7])
luad[,10]
cor(luad[,10],luad[,7],na.rm=T)
? cor
cor(luad[,10],luad[,7],na.rm=F)
#for correlation of each cpg site
cor<-matrix(NA,6,6)
for (i in 1:6){
for (j in 1:6){
cor[i,j]<-cor(luad[,i+6],luad[,j+6],use="complete.obs")
}
}
cor
cor1<-matrix(NA,6,6)
for (i in 1:6){
for (j in 1:6){
cor1[i,j]<-cor(luad[,i+6],luad[,j+6],use="complete.obs")
}
}
cor2<-matrix(NA,6,6)
for (i in 1:6){
for (j in 1:6){
cor2[i,j]<-cor(lusc[,i+6],lusc[,j+6],use="complete.obs")
}
}
cor1
cor2
cor1-cor2
library("corrplot")
? corrplot
corrplot(cor1,method="circle")
corrplot(cor2,method="circle")
corrplot(cor1,method="circle")
pdf("corrplot.pdf")
par<-par(mfrow=c(1,2))
corrplot(cor1,method="circle")
corrplot(cor2,method="circle")
dev.off()
getwd()
library("corrplot")
cor1<-matrix(NA,6,6)
for (i in 1:6){
for (j in 1:6){
cor1[i,j]<-cor(luad[,i+6],luad[,j+6],use="complete.obs")
}
}
cor2<-matrix(NA,6,6)
for (i in 1:6){
for (j in 1:6){
cor2[i,j]<-cor(lusc[,i+6],lusc[,j+6],use="complete.obs")
}
}
pdf("corrplot.pdf")
par<-par(mfrow=c(1,2))
corrplot(cor1,method="circle")
corrplot(cor2,method="circle")
dev.off()
colnames(cor1)<-colnames(luad)[7..12]
colnames(cor1)<-colnames(luad)[7:12]
colnames(cor2)<-colnames(luad)[7:12]
pdf("corrplot.pdf")
par<-par(mfrow=c(1,2))
colnames(cor1)<-colnames(luad)[7:12]
colnames(cor2)<-colnames(luad)[7:12]
corrplot(cor1,method="circle")
corrplot(cor2,method="circle")
dev.off()
? corrplot
pdf("corrplot.pdf")
par<-par(mfrow=c(1,2))
colnames(cor1)<-colnames(luad)[7:12]
colnames(cor2)<-colnames(luad)[7:12]
rownames(cor1)<-colnames(luad)[7:12]
rownames(cor2)<-colnames(luad)[7:12]
corrplot(cor1,method="circle")
corrplot(cor2,method="circle")
dev.off()
(Poiss.tab <- table(N = stats::rpois(200, lambda = 5)))
plot(Poiss.tab, main = "plot(table(rpois(200, lambda = 5)))")
plot(table(state.division))
(Poiss.tab <- table(N = stats::rpois(200, lambda = 5)))
plot(Poiss.tab, main = "plot(table(rpois(200, lambda = 5)))")
plot(table(state.division))
plot(Poiss.tab, main = "plot(table(rpois(200, lambda = 5)))")
plot(table(state.division))
plot(cor1)
ggplot(cor1)
library(ggplot)
library("ggplot")
library("ggplot2")
install.packages("ggplot2")
write.table(cor1,file="cor1.txt",sep="\t",col.names=colnames(luad)[7:12],row.names=colnames(luad)[7:12])
write.table(cor2,file="cor2.txt",sep="\t",col.names=colnames(luad)[7:12],row.names=colnames(luad)[7:12])
install.packages("gplots")
library(gplots)
# show R version information
textplot(version)
# show the alphabet as a single string
textplot( paste(letters[1:26], collapse=" ") )
# show the alphabet as a matrix
textplot( matrix(letters[1:26], ncol=2))
### Make a nice 4 way display with two plots and two text summaries
data(iris)
par(mfrow=c(2,2))
plot( Sepal.Length ~ Species, data=iris, border="blue", col="cyan",
main="Boxplot of Sepal Length by Species" )
plotmeans(Sepal.Length ~ Species, data=iris, barwidth=2, connect=FALSE,
main="Means Confidence Intervals of Sepal Length by Species")
info <- sapply(split(iris$Sepal.Length, iris$Species),
function(x) round(c(Mean=mean(x), SD=sd(x), N=gdata::nobs(x)),2))
textplot( info, valign="top"  )
title("Sepal Length by Species")
reg <- lm( Sepal.Length ~ Species, data=iris )
textplot( capture.output(summary(reg)), valign="top")
title("Regression of Sepal Length by Species")
reg <- lm( Sepal.Length ~ Species, data=iris )
textplot( capture.output(summary(reg)), valign="top")
title("Regression of Sepal Length by Species")
par(mfrow=c(1,1))
textplot( capture.output(summary(reg)), valign="top")
x<-matrix(NA,5,5);
textplot(x)
x<-matrix(rnorm(25,1,1),5,5);
textplot(x)
? textplot
