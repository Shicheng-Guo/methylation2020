if (percents) {
if (range.p[1] < 0 || range.p[1] > 100)
stop("p must be in the range 0 to 100")
p <- p/100
range.p <- range.p/100
}
else if (range.p[1] < 0 || range.p[1] > 1)
stop("p must be in the range 0 to 1")
a <- if (missing(adjust)) {
if (isTRUE(all.equal(range.p[1], 0)) || isTRUE(all.equal(range.p[2],
1)))
0.025
else 0
}
else adjust
if (missing(adjust) && a != 0)
warning(paste("proportions remapped to (", a, ", ", 1 -
a, ")", sep = ""))
a <- 1 - 2 * a
log((0.5 + a * (p - 0.5))/(1 - (0.5 + a * (p - 0.5))))
}
logit<-function (p, percents = range.p[2] > 1, adjust)
{
range.p <- range(p, na.rm = TRUE)
if (percents) {
if (range.p[1] < 0 || range.p[1] > 100)
stop("p must be in the range 0 to 100")
p <- p/100
range.p <- range.p/100
}
else if (range.p[1] < 0 || range.p[1] > 1)
stop("p must be in the range 0 to 1")
a <- if (missing(adjust)) {
if (isTRUE(all.equal(range.p[1], 0)) || isTRUE(all.equal(range.p[2],
1)))
0.025
else 0
}
else adjust
if (missing(adjust) && a != 0)
warning(paste("proportions remapped to (", a, ", ", 1 -
a, ")", sep = ""))
a <- 1 - 2 * a
log((0.5 + a * (p - 0.5))/(1 - (0.5 + a * (p - 0.5))))
}
logit(0.5)
colMeans(deconv)
pie <- ggplot(mtcars, aes(x = factor(1), fill = factor(cyl))) + geom_bar(width = 10)
pie + coord_polar(theta = "y")
pie <- ggplot(mtcars, aes(x = factor(2), fill = factor(cyl))) + geom_bar(width = 10)
pie + coord_polar(theta = "y")
？ coord_polar
? coord_polar
head(mtcars)
pie + coord_polar(theta = "x")
pie + coord_polar(theta = "y")
pie + coord_polar(theta = "x"")
pie + coord_polar(theta = "x“)
pie + coord_polar(theta = "x“)
）
}
+
}
}
)
)
)
)
)
)
}}}}
))))))
D
}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}
))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
pie + coord_polar(theta = "x“)
pie <- ggplot(mtcars, aes(x = factor(2), fill = factor(cyl))) + geom_bar(width = 10)
pie + coord_polar(theta = "x“)
pie + coord_polar(theta = "x“)
pie + coord_polar(theta = "x")
pie + coord_polar(theta = "y")
geom_bar
? geom_bar
pie <- ggplot(mtcars, aes(x = factor(2), fill = factor(cyl))) + geom_bar(width = 10)
pie + coord_polar(theta = "y")
pie <- ggplot(mtcars, aes(fill = factor(cyl))) + geom_bar(width = 10)
pie + coord_polar(theta = "y")
pie <- ggplot(mtcars, aes(x=fator(cyl),fill = factor(cyl))) + geom_bar(width = 10)
pie + coord_polar(theta = "y")
pie <- ggplot(mtcars, aes(x=factor(cyl),fill = factor(cyl))) + geom_bar(width = 10)
pie + coord_polar(theta = "y")
pie <- ggplot(mtcars, aes(x=factor(1),fill = factor(cyl))) + geom_bar(width = 10)
pie + coord_polar(theta = "y")
x<-c(96,152,336,20,22,58,46,55,38,53)
IQR(x)
? IQR
quantile(x)
x<-c(37,20,35,55,21,16,36,15,97,30)
IQR(x)
mean(x)
x<-c(31,247,38,27,89,34,303,21,21,32,327,85,56,70,25,29,131,26,47,21,21,55,28,43,37,38,23,18,29,24,24,34,243,40,43,33,62,36,15,10,96,18,15,51,42,40,63,46)
IQR(x)
average(x)
mean(x)
mean(x)
IQR(x)
gsi<-gmaxgroup<-avebase<-c()
gsi
gmaxgroup
avebase
library("GEOquery")
eset1 = getDataset(gse="GSE10072", gpl="GPL96", norm="ORIGINAL", genes=TRUE);
install.packages("inSilicoDb")
source("https://bioconductor.org/biocLite.R")
biocLite("inSilicoMerging")
biocLite("inSilicoMerging")
install.packages("C:/Users/shicheng/Downloads/DeconRNASeq_1.2.0.zip", repos = NULL, type = "win.binary")
rm(list=ls())
install.packages("C:/Users/shicheng/Downloads/DeconRNASeq_1.2.0.zip", repos = NULL, type = "win.binary")
install.packages("C:/Users/shicheng/Downloads/DeconRNASeq_1.2.0.zip", repos = NULL, type = "win.binary")
biocLite("inSilicoMerging")
source("https://bioconductor.org/biocLite.R")
biocLite("inSilicoMerging")
? boxplot
? par
? par
? boxplot
21*30/(42*6)
21/63
6/36
22/63
22*30/(42*6)
22*30/(41*6)
dim(xolimdide)
1050+750+600
690520
690-520
690-750
520+60
mhl<-c()
for(i in seq(5,1000,by=1)){
w=4:i
p=runif(length(w),0,0.3)
mhl1=sum(p*w)/sum(w)
mhl<-c(mhl,mhl1)
}
plot(mhl,ylab="MHL",xlab="Number of Methylation Haplotypes",col="red",type="l",lwd=3)
qqplotR<-function(p){
observed <- sort(p)
lobs <- -(log10(observed))
expected <- c(1:length(observed))
lexp <- -(log10(expected / (length(expected)+1)))
data.frame(lobs,lexp)
}
p1<-c()
z<-rnorm(1000,0,1)
for(i in 1:1000000){
x<-rnorm(1000,0,1)
y<-rnorm(1000,0,1)
fit<-lm(z~x+y+x*y)
tmp<-summary(fit)$coefficients[4,4]
p1<-c(tmp,p1)
}
LD<-function(vector){
rlt<-list()
table<-matrix(table(vector),2,2)
pAB=table[1,1]/sum(table)
pA=(2*table[1,1]+table[2,1]+table[1,2])/(2*sum(table))
pB=(2*table[2,2]+table[2,1]+table[1,2])/(2*sum(table))
pa=1-pA
pb=1-pB
D=pAB-pA*pB
if(D>0){
Dmax=min(pA*pb,pa*pB)
} else{
Dmax=max(-pA*pB,-pa*pb)
}
Dp=D/Dmax
r=Dp/sqrt(pA*pa*pB*pb)
test<-chisq.test(table)
chisq<-test$statistic
A1<-as.numeric(as.factor(unlist(lapply(vector,function(x) substr(x,1,1)))))
A2<-as.numeric(as.factor(unlist(lapply(vector,function(x) substr(x,2,2)))))
fit<-cor.test(A1,A2)
corr=fit$estimate
rlt$nobs<-sum(table)
rlt$corr=as.numeric(corr)
rlt$corr.p=fit$p.value
rlt$Dp=Dp
rlt$r=r
rlt$p=test$p.value
return(rlt)
}
tmpp<-c()
for(j in 1:1000){
a=abs(rnorm(1,3,10))
b=abs(rnorm(1,3,10))
c=abs(rnorm(1,3,10))
d=abs(rnorm(1,3,10))
mlc<-c()
r<-c()
for(i in 1:100){
vector<-sample(c(rep("CC",a),rep("CT",b),rep("TC",c),rep("TT",d)),100,replace=T)
A1<-abs(sum(as.numeric(as.factor(unlist(lapply(vector,function(x) substr(x,1,1)))))-2))/length(vector)
A2<-abs(sum(as.numeric(as.factor(unlist(lapply(vector,function(x) substr(x,2,2)))))-2))/length(vector)
tmp<-data.frame(A1,A2)
mlc<-rbind(mlc,tmp)
r<-rbind(r,LD(vector))
}
rpadj<-mean(na.omit(unlist(data.frame(r)[,6])))
corpadj<-cor.test(mlc[,1],mlc[,2])$p.value
tmp<-c(rpadj,corpadj)
tmp
tmpp<-rbind(tmpp,tmp)
}
######
library("ggplot2")
tmpp<-c()
for(j in 1:1000){
a=abs(rnorm(1,5,10))+2
b=abs(rnorm(1,5,10))+2
c=abs(rnorm(1,5,10))+2
d=abs(rnorm(1,5,10))+2
mlc<-c()
r<-c()
for(i in 1:100){
vector<-sample(c(rep("CC",a),rep("CT",b),rep("TC",c),rep("TT",d)),100,replace=T)
A1<-abs(sum(as.numeric(as.factor(unlist(lapply(vector,function(x) substr(x,1,1)))))-2))/length(vector)
A2<-abs(sum(as.numeric(as.factor(unlist(lapply(vector,function(x) substr(x,2,2)))))-2))/length(vector)
tmp<-data.frame(A1,A2)
mlc<-rbind(mlc,tmp)
r<-rbind(r,LD(vector))
}
rpadj<-mean(na.omit(unlist(data.frame(r)[,6])))
corpadj<-cor.test(mlc[,1],mlc[,2])$p.value
tmp<-c(rpadj,corpadj,sd(na.omit(mlc[,1])))
tmp
tmpp<-rbind(tmpp,tmp)
}
colnames(tmpp)<-c("LD","Cor","sd")
tmpp<-data.frame(tmpp)
library("ggplot2")
setwd("C:\\Users\\shicheng\\Dropbox\\Project\\methylation\\monod\\analysis")
load("LDCor.RData")
f<-ggplot(tmpp,aes(-log(LD,10),-log(Cor,10)))+geom_point(size=6)+ geom_smooth(method = "lm", se = FALSE)
f<-f+xlab("LD:-log(P,10)")+ylab("Cor:-log(P,10)")+theme_bw()+theme(plot.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
pdf("example.pdf",width=5,height=5)
print(f)
dev.off()
x<--log(tmpp[,1],10)
y<--log(tmpp[,2],10)
xx<-data.frame(x,y)
tmpp<-c()
for(j in 1:10){
a=abs(rnorm(1,5,10))+2
b=abs(rnorm(1,5,10))+2
c=abs(rnorm(1,5,10))+2
d=abs(rnorm(1,5,10))+2
mlc<-c()
r<-c()
for(i in 1:100){
vector<-sample(c(rep("CC",a),rep("CT",b),rep("TC",c),rep("TT",d)),100,replace=T)
A1<-abs(sum(as.numeric(as.factor(unlist(lapply(vector,function(x) substr(x,1,1)))))-2))/length(vector)
A2<-abs(sum(as.numeric(as.factor(unlist(lapply(vector,function(x) substr(x,2,2)))))-2))/length(vector)
tmp<-data.frame(A1,A2)
mlc<-rbind(mlc,tmp)
r<-rbind(r,LD(vector))
}
rpadj<-mean(na.omit(unlist(data.frame(r)[,6])))
corpadj<-cor.test(mlc[,1],mlc[,2])$p.value
tmp<-c(rpadj,corpadj,sd(na.omit(mlc[,1])))
tmp
tmpp<-rbind(tmpp,tmp)
}
tmpp
vector
vector=c("CC CT TC TT CC TT")
rlt<-list()
table<-matrix(table(vector),2,2)
pAB=table[1,1]/sum(table)
pA=(2*table[1,1]+table[2,1]+table[1,2])/(2*sum(table))
pB=(2*table[2,2]+table[2,1]+table[1,2])/(2*sum(table))
pa=1-pA
pb=1-pB
D=pAB-pA*pB
if(D>0){
Dmax=min(pA*pb,pa*pB)
} else{
Dmax=max(-pA*pB,-pa*pb)
}
Dp=D/Dmax
r=Dp/sqrt(pA*pa*pB*pb)
test<-chisq.test(table)
chisq<-test$statistic
A1<-as.numeric(as.factor(unlist(lapply(vector,function(x) substr(x,1,1)))))
A2<-as.numeric(as.factor(unlist(lapply(vector,function(x) substr(x,2,2)))))
fit<-cor.test(A1,A2)
corr=fit$estimate
vector=c("CC CT TC TT CC TT CC TT CT TC TT CC")
rlt<-list()
table<-matrix(table(vector),2,2)
pAB=table[1,1]/sum(table)
pA=(2*table[1,1]+table[2,1]+table[1,2])/(2*sum(table))
pB=(2*table[2,2]+table[2,1]+table[1,2])/(2*sum(table))
pa=1-pA
pb=1-pB
D=pAB-pA*pB
if(D>0){
Dmax=min(pA*pb,pa*pB)
} else{
Dmax=max(-pA*pB,-pa*pb)
}
Dp=D/Dmax
r=Dp/sqrt(pA*pa*pB*pb)
test<-chisq.test(table)
chisq<-test$statistic
A1<-as.numeric(as.factor(unlist(lapply(vector,function(x) substr(x,1,1)))))
A2<-as.numeric(as.factor(unlist(lapply(vector,function(x) substr(x,2,2)))))
fit<-cor.test(A1,A2)
vector=c("CC CT TC TT CC TT CC TT CT TC TT CC CT CT TC")
rlt<-list()
table<-matrix(table(vector),2,2)
pAB=table[1,1]/sum(table)
pA=(2*table[1,1]+table[2,1]+table[1,2])/(2*sum(table))
pB=(2*table[2,2]+table[2,1]+table[1,2])/(2*sum(table))
pa=1-pA
pb=1-pB
D=pAB-pA*pB
if(D>0){
Dmax=min(pA*pb,pa*pB)
} else{
Dmax=max(-pA*pB,-pa*pb)
}
Dp=D/Dmax
r=Dp/sqrt(pA*pa*pB*pb)
test<-chisq.test(table)
chisq<-test$statistic
A1<-as.numeric(as.factor(unlist(lapply(vector,function(x) substr(x,1,1)))))
A2<-as.numeric(as.factor(unlist(lapply(vector,function(x) substr(x,2,2)))))
fit<-cor.test(A1,A2)
corr=fit$estimate
A1
A2
lapply(vector,function(x) substr(x,1,1))
vector=c("CC","CT","TC","TT")
rlt<-list()
table<-matrix(table(vector),2,2)
pAB=table[1,1]/sum(table)
pA=(2*table[1,1]+table[2,1]+table[1,2])/(2*sum(table))
pB=(2*table[2,2]+table[2,1]+table[1,2])/(2*sum(table))
pa=1-pA
pb=1-pB
D=pAB-pA*pB
if(D>0){
Dmax=min(pA*pb,pa*pB)
Dmax=max(-pA*pB,-pa*pb)
} else{
}
Dp=D/Dmax
r=Dp/sqrt(pA*pa*pB*pb)
test<-chisq.test(table)
chisq<-test$statistic
A1<-as.numeric(as.factor(unlist(lapply(vector,function(x) substr(x,1,1)))))
A2<-as.numeric(as.factor(unlist(lapply(vector,function(x) substr(x,2,2)))))
fit<-cor.test(A1,A2)
corr=fit$estimate
rlt$nobs<-sum(table)
rlt$corr=as.numeric(corr)
rlt$corr.p=fit$p.value
rlt$Dp=Dp
rlt$r=r
rlt$p=test$p.value
rlt
mhl<-function(hap_comb_array){
mhl_value<-c()
hap_comb_array<-unlist(hap_comb_array)
meth_hap=lapply(lapply(hap_comb_array,function(x) unique(unlist(strsplit(x,"")))),function(x) paste(x,collapse=""))=="C"
unmeth_hap=lapply(lapply(hap_comb_array,function(x) unique(unlist(strsplit(x,"")))),function(x) paste(x,collapse=""))=="T"
hap_comb_array<-c(hap_comb_array[meth_hap],hap_comb_array[unmeth_hap])
for(i in unique(nchar(hap_comb_array))){
input_tmp<-which(nchar(hap_comb_array)==i)
nmeth<-length(grep("C",hap_comb_array[input_tmp]))
nunmeth<-length(grep("T",hap_comb_array[input_tmp]))
mhl_value<-c(mhl_value,i*nmeth/(nunmeth+nmeth))
}
mhl_value<-sum(mhl_value)/sum(unique(nchar(hap_comb_array)))
return(mhl_value)
}
hapinfo<-c()
for(i in 1:1000){
hapinfo<-c(hapinfo,paste(sample(c("C","T"),4,replace=T),collapse = ""))
}
hapinfo
hapinfo<-c()
for(i in 1:1000){
hapinfo<-c(hapinfo,paste(sample(c("C","T"),4,replace=T),collapse = ""))
}
hapinfo
mhl_rlt<-mhl(hap_comb(unique(hapinfo)))
hap_comb_tmp<-function(hapinfo.single){
# hap_com.single is a character of haplotype, such as "TCTCTT"
hap_com.single<-c()
for(i in 1:nchar(hapinfo.single)){
for(j in i:(nchar(hapinfo.single))){
hap_com.single<-c(hap_com.single,(substr(hapinfo.single,i,j)))
}
}
return(hap_com.single)
}
hap_comb<-function(hapinfo){
# haplotype is array of observed methylation haplotype
hap_comb<-unlist(lapply(hapinfo,hap_comb_tmp))
return(hap_comb)
}
mhl<-function(hap_comb_array){
mhl_value<-c()
hap_comb_array<-unlist(hap_comb_array)
meth_hap=lapply(lapply(hap_comb_array,function(x) unique(unlist(strsplit(x,"")))),function(x) paste(x,collapse=""))=="C"
unmeth_hap=lapply(lapply(hap_comb_array,function(x) unique(unlist(strsplit(x,"")))),function(x) paste(x,collapse=""))=="T"
hap_comb_array<-c(hap_comb_array[meth_hap],hap_comb_array[unmeth_hap])
for(i in unique(nchar(hap_comb_array))){
input_tmp<-which(nchar(hap_comb_array)==i)
nmeth<-length(grep("C",hap_comb_array[input_tmp]))
nunmeth<-length(grep("T",hap_comb_array[input_tmp]))
mhl_value<-c(mhl_value,i*nmeth/(nunmeth+nmeth))
}
mhl_value<-sum(mhl_value)/sum(unique(nchar(hap_comb_array)))
return(mhl_value)
}
hapinfo<-c()
for(i in 1:1000){
hapinfo<-c(hapinfo,paste(sample(c("C","T"),4,replace=T),collapse = ""))
}
hapinfo
mhl_rlt<-mhl(hap_comb(unique(hapinfo)))
mhl_rlt
mhlRlt<-mhl(hap_comb(unique(hapinfo)))
mhlRlt
hapinfo
for(K in seq(1,100,1)){
hapinfo<-c(rep("CCCC",K),rep("TTTT",100-K))
mhlrlt<-mhl(hap_comb(unique(hapinfo)))
mhlRlt<-c(mhlRlt,mhlrlt)
}
mhlRlt
for(K in seq(0,100,1)){
hapinfo<-c(rep("CCCC",K),rep("TTTT",100-K))
mhlrlt<-mhl(hap_comb(unique(hapinfo)))
mhlRlt<-c(mhlRlt,mhlrlt)
}
hapinfo
mhlRlt
seq(0,100,1)
hapinfo<-c(rep("CCCC",K),rep("TTTT",100-K))
mhlrlt<-mhl(hap_comb(unique(hapinfo)))
mhlRlt<-c(mhlRlt,mhlrlt)
mhlRlt<-c()
for(K in seq(0,100,1)){
hapinfo<-c(rep("CCCC",K),rep("TTTT",100-K))
mhlrlt<-mhl(hap_comb(unique(hapinfo)))
mhlRlt<-c(mhlRlt,mhlrlt)
}
mhlRlt
hapinfo
mhlRlt<-c()
for(K in seq(0,100,1)){
hapinfo<-c(rep("CCCC",K),rep("TTTT",100-K))
mhlrlt<-mhl(hap_comb(unique(hapinfo)))
mhlRlt<-c(mhlRlt,mhlrlt)
}
mhlRlt
hapinfo<-c(rep("CCCC",K),rep("TTTT",100-K))
hap_comb(unique(hapinfo))
k=1
hap_comb(unique(hapinfo))
hapinfo<-c(rep("CCCC",K),rep("TTTT",100-K))
hap_comb(unique(hapinfo))
hap_comb(unique(hapinfo))
K=1
hapinfo<-c(rep("CCCC",K),rep("TTTT",100-K))
hap_comb(unique(hapinfo))
hapinfo
unlist(hapinfo)
meth_hap=lapply(lapply(hap_comb_array,function(x) unique(unlist(strsplit(x,"")))),function(x) paste(x,collapse=""))=="C"
unmeth_hap=lapply(lapply(hap_comb_array,function(x) unique(unlist(strsplit(x,"")))),function(x) paste(x,collapse=""))=="T"
hap_comb_array<-unlist(hapinfo)
meth_hap=lapply(lapply(hap_comb_array,function(x) unique(unlist(strsplit(x,"")))),function(x) paste(x,collapse=""))=="C"
unmeth_hap=lapply(lapply(hap_comb_array,function(x) unique(unlist(strsplit(x,"")))),function(x) paste(x,collapse=""))=="T"
meth_hap
unmeth_hap
hap_comb_array<-c(hap_comb_array[meth_hap],hap_comb_array[unmeth_hap])
hap_comb_array
hap_comb_tmp<-function(hapinfo.single){
# hap_com.single is a character of haplotype, such as "TCTCTT"
hap_com.single<-c()
for(i in 1:nchar(hapinfo.single)){
for(j in i:(nchar(hapinfo.single))){
hap_com.single<-c(hap_com.single,(substr(hapinfo.single,i,j)))
}
}
return(hap_com.single)
}
hap_comb_tmp()\
hap_comb_tmp("TTTCCC)
""
)"
"
)
))))
}
