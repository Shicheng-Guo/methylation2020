fpca.rnaseq<- function(gene.list,cite.list,rnadata,basis=37,rng=0){
gene.chrom = gene.list$gene.chrom
gene.start =gene.list$gene.start
gene.end =gene.list$gene.end
snp.chrom=cite.list$chr
snp.position=cite.list$pos
geno = as.matrix(rnadata)
fpca.rnaseq.rlt<-data.frame()
if( !is.matrix(geno) ) stop('Data cannot be convert to matrix')
rlt<-data.frame( )  					#initial the result
for ( i in 1:dim(gene.list)[1]  ) {  		#Test each gene in gene.csv
sub.idx<- snp.chrom == gene.chrom[i]   	#specify the chromosome
sub.idx<- sub.idx & (snp.position > (gene.start[i] -rng) )  #choose the SNPs from the gene start minus range set before
sub.idx<- sub.idx & (snp.position < (gene.end[i] + rng) ) #choose the SNPs from the gene end plus range set before
x<-geno[,sub.idx]			#get the test genotype data
rlt[i,"Gene_symbol"] <- gene.list[i,4]	#record the tested gene symbol
pos<- snp.position[sub.idx]		#get the test SNP position
x<-as.matrix(x)
if( dim(x)[2] >= 3){
#    maf<-colMeans(x,na.rm=TRUE)
#    x[,maf>1]=2-x[,maf>1]
#    x[is.na(x)]=0
#    maf=colMeans(x)
#    pos<-pos[maf>0]
#    x=x[,maf>0]
}
if ( length(pos) >= 3 ){      # no need since exon usually greater than 200bp
pos2= 0:(length(pos)-1)
pos2=(pos2-pos2[1])/(pos2[length(pos2)]-pos2[1])
fpca.rlt<- try( fpca.genotype(x,pos,nbasis=basis)  )#test the p-value
fpca.rnaseq.rlt<-cbind(fpca.rnaseq.rlt,fpca.rlt$scores)
#     rlt[i,"Snp_Number"]<-length(pos)			#record how many snps is in the test
#    rlt[i,"FPCA_80"]<-try( fpca.rlt$pv.all[fpca.rlt$prop>0.8][1] )
#    rlt[i,"FPCA_90"]<-try( fpca.rlt$pv.all[fpca.rlt$prop>0.9][1] )
}
#    print( i/dim(gene.list)[1])
}
fpca.rnaseq.rlt
}
result<-fpca.rnaseq(loc$total_gene,loc$gene.list,mydata,basis=37,rng=50000)
dim(result)
names(loc)
loc$snp$chr
loc$snp$pos
names(loc)
loc$gene.list$gene
result<-fpca.rnaseq(loc$total_gene,loc$samplegene,mydata,basis=37,rng=0)
dim(result)
result
loc$samplegene
loc$snp
result<-fpca.rnaseq(loc$total_gene,loc$snp,mydata,basis=37,rng=0)
fpca.rlt
result<-fpca.genotype(mydata)
names(result)
length(result$scores)
dim(result$scores)
a<-1:3
b<-2:4
cbind(a,b)
a
fpca.rnaseq<- function(gene.list,cite.list,rnadata,basis=37,rng=0){
gene.chrom = gene.list$gene.chrom
gene.start =gene.list$gene.start
gene.end =gene.list$gene.end
snp.chrom=cite.list$chr
snp.position=cite.list$pos
geno = as.matrix(rnadata)
fpca.rnaseq.rlt<-data.frame()
if( !is.matrix(geno) ) stop('Data cannot be convert to matrix')
rlt<-data.frame( )  					#initial the result
for ( i in 1:dim(gene.list)[1]  ) {  		#Test each gene in gene.csv
sub.idx<- snp.chrom == gene.chrom[i]   	#specify the chromosome
sub.idx<- sub.idx & (snp.position > (gene.start[i] -rng) )  #choose the SNPs from the gene start minus range set before
sub.idx<- sub.idx & (snp.position < (gene.end[i] + rng) ) #choose the SNPs from the gene end plus range set before
if(length(sub.idx)==0)
next
x<-geno[,sub.idx]			#get the test genotype data
rlt[i,"Gene_symbol"] <- gene.list[i,4]	#record the tested gene symbol
print "gene.list[i,4]";
pos<- snp.position[sub.idx]		#get the test SNP position
x<-as.matrix(x)
#  if( dim(x)[2] >= 3){
#    maf<-colMeans(x,na.rm=TRUE)
#    x[,maf>1]=2-x[,maf>1]
#    x[is.na(x)]=0
#    maf=colMeans(x)
#    pos<-pos[maf>0]
#    x=x[,maf>0]
#  }
if ( length(pos) >= 3 ){      # no need since exon usually greater than 200bp
pos2= 0:(length(pos)-1)
pos2=(pos2-pos2[1])/(pos2[length(pos2)]-pos2[1])
fpca.rlt<- try( fpca.genotype(x,pos,nbasis=basis)  )#test the p-value
fpca.rnaseq.rlt<-cbind(fpca.rnaseq.rlt,fpca.rlt$scores)
#    rlt[i,"Snp_Number"]<-length(pos)			#record how many snps is in the test
#    rlt[i,"FPCA_80"]<-try( fpca.rlt$pv.all[fpca.rlt$prop>0.8][1] )
#    rlt[i,"FPCA_90"]<-try( fpca.rlt$pv.all[fpca.rlt$prop>0.9][1] )
}
#    print( i/dim(gene.list)[1])
}
fpca.rnaseq.rlt
}
fpca.rnaseq<- function(gene.list,cite.list,rnadata,basis=37,rng=0){
gene.chrom = gene.list$gene.chrom
gene.start =gene.list$gene.start
gene.end =gene.list$gene.end
snp.chrom=cite.list$chr
snp.position=cite.list$pos
geno = as.matrix(rnadata)
fpca.rnaseq.rlt<-data.frame()
if( !is.matrix(geno) ) stop('Data cannot be convert to matrix')
rlt<-data.frame( )  					#initial the result
for ( i in 1:dim(gene.list)[1]  ) {  		#Test each gene in gene.csv
sub.idx<- snp.chrom == gene.chrom[i]   	#specify the chromosome
sub.idx<- sub.idx & (snp.position > (gene.start[i] -rng) )  #choose the SNPs from the gene start minus range set before
sub.idx<- sub.idx & (snp.position < (gene.end[i] + rng) ) #choose the SNPs from the gene end plus range set before
if(length(sub.idx)>0){
x<-geno[,sub.idx]			#get the test genotype data
rlt[i,"Gene_symbol"] <- gene.list[i,4]	#record the tested gene symbol
print "gene.list[i,4]";
pos<- snp.position[sub.idx]		#get the test SNP position
x<-as.matrix(x)
#  if( dim(x)[2] >= 3){
#    maf<-colMeans(x,na.rm=TRUE)
#    x[,maf>1]=2-x[,maf>1]
#    x[is.na(x)]=0
#    maf=colMeans(x)
#    pos<-pos[maf>0]
#    x=x[,maf>0]
#  }
if ( length(pos) >= 3 ){      # no need since exon usually greater than 200bp
pos2= 0:(length(pos)-1)
pos2=(pos2-pos2[1])/(pos2[length(pos2)]-pos2[1])
fpca.rlt<- try( fpca.genotype(x,pos,nbasis=basis)  )#test the p-value
fpca.rnaseq.rlt<-cbind(fpca.rnaseq.rlt,fpca.rlt$scores)
#    rlt[i,"Snp_Number"]<-length(pos)			#record how many snps is in the test
#    rlt[i,"FPCA_80"]<-try( fpca.rlt$pv.all[fpca.rlt$prop>0.8][1] )
#    rlt[i,"FPCA_90"]<-try( fpca.rlt$pv.all[fpca.rlt$prop>0.9][1] )
}
#    print( i/dim(gene.list)[1])
}
}
fpca.rnaseq.rlt
}
fpca.rnaseq<- function(gene.list,cite.list,rnadata,basis=37,rng=0){
gene.chrom = gene.list$gene.chrom
gene.start =gene.list$gene.start
gene.end =gene.list$gene.end
snp.chrom=cite.list$chr
snp.position=cite.list$pos
geno = as.matrix(rnadata)
fpca.rnaseq.rlt<-data.frame()
if( !is.matrix(geno) ) stop('Data cannot be convert to matrix')
rlt<-data.frame( )  					#initial the result
for ( i in 1:dim(gene.list)[1]  ) {  		#Test each gene in gene.csv
sub.idx<- snp.chrom == gene.chrom[i]   	#specify the chromosome
sub.idx<- sub.idx & (snp.position > (gene.start[i] -rng) )  #choose the SNPs from the gene start minus range set before
sub.idx<- sub.idx & (snp.position < (gene.end[i] + rng) ) #choose the SNPs from the gene end plus range set before
if(length(sub.idx)>0){
x<-geno[,sub.idx]			#get the test genotype data
rlt[i,"Gene_symbol"] <- gene.list[i,4]	#record the tested gene symbol
print "gene.list[i,4]";
pos<- snp.position[sub.idx]		#get the test SNP position
x<-as.matrix(x)
#  if( dim(x)[2] >= 3){
#    maf<-colMeans(x,na.rm=TRUE)
#    x[,maf>1]=2-x[,maf>1]
#    x[is.na(x)]=0
#    maf=colMeans(x)
#    pos<-pos[maf>0]
#    x=x[,maf>0]
#  }
if ( length(pos) >= 3 ){      # no need since exon usually greater than 200bp
pos2= 0:(length(pos)-1)
pos2=(pos2-pos2[1])/(pos2[length(pos2)]-pos2[1])
fpca.rlt<- try( fpca.genotype(x,pos,nbasis=basis)  )#test the p-value
fpca.rnaseq.rlt<-cbind(fpca.rnaseq.rlt,fpca.rlt$scores)
}
}
}
fpca.rnaseq.rlt
}
fpca.rnaseq<- function(gene.list,cite.list,rnadata,basis=37,rng=0){
gene.chrom = gene.list$gene.chrom
gene.start =gene.list$gene.start
gene.end =gene.list$gene.end
snp.chrom=cite.list$chr
snp.position=cite.list$pos
geno = as.matrix(rnadata)
fpca.rnaseq.rlt<-data.frame()
if( !is.matrix(geno) ) stop('Data cannot be convert to matrix')
rlt<-data.frame( )  					#initial the result
for ( i in 1:dim(gene.list)[1]  ) {  		#Test each gene in gene.csv
sub.idx<- snp.chrom == gene.chrom[i]   	#specify the chromosome
sub.idx<- sub.idx & (snp.position > (gene.start[i] -rng) )  #choose the SNPs from the gene start minus range set before
sub.idx<- sub.idx & (snp.position < (gene.end[i] + rng) ) #choose the SNPs from the gene end plus range set before
if(length(sub.idx)>0){
x<-geno[,sub.idx]			#get the test genotype data
rlt[i,"Gene_symbol"] <- gene.list[i,4]	#record the tested gene symbol
print "gene.list[i,4]";
pos<- snp.position[sub.idx]		#get the test SNP position
x<-as.matrix(x)
#  if( dim(x)[2] >= 3){
#    maf<-colMeans(x,na.rm=TRUE)
#    x[,maf>1]=2-x[,maf>1]
#    x[is.na(x)]=0
#    maf=colMeans(x)
#    pos<-pos[maf>0]
#    x=x[,maf>0]
#  }
if ( length(pos) >= 3 ){      # no need since exon usually greater than 200bp
pos2= 0:(length(pos)-1)
pos2=(pos2-pos2[1])/(pos2[length(pos2)]-pos2[1])
fpca.rlt<- try( fpca.genotype(x,pos,nbasis=basis)  )#test the p-value
fpca.rnaseq.rlt<-cbind(fpca.rnaseq.rlt,fpca.rlt$scores)
}
}
}
fpca.rnaseq.rlt
}
fpca.rnaseq<- function(gene.list,cite.list,rnadata,basis=37,rng=0){
gene.chrom = gene.list$gene.chrom
gene.start =gene.list$gene.start
gene.end =gene.list$gene.end
snp.chrom=cite.list$chr
snp.position=cite.list$pos
geno = as.matrix(rnadata)
fpca.rnaseq.rlt<-data.frame()
if( !is.matrix(geno) ) stop('Data cannot be convert to matrix')
rlt<-data.frame( )  					#initial the result
for ( i in 1:dim(gene.list)[1]  ) {  		#Test each gene in gene.csv
sub.idx<- snp.chrom == gene.chrom[i]   	#specify the chromosome
sub.idx<- sub.idx & (snp.position > (gene.start[i] -rng) )  #choose the SNPs from the gene start minus range set before
sub.idx<- sub.idx & (snp.position < (gene.end[i] + rng) ) #choose the SNPs from the gene end plus range set before
if(length(sub.idx)>0){
x<-geno[,sub.idx]			#get the test genotype data
rlt[i,"Gene_symbol"] <- gene.list[i,4]	#record the tested gene symbol
print "gene.list[i,4]";
pos<- snp.position[sub.idx]		#get the test SNP position
x<-as.matrix(x)
#  if( dim(x)[2] >= 3){
#    maf<-colMeans(x,na.rm=TRUE)
#    x[,maf>1]=2-x[,maf>1]
#    x[is.na(x)]=0
#    maf=colMeans(x)
#    pos<-pos[maf>0]
#    x=x[,maf>0]
#  }
}
if ( length(pos) >= 3 ){      # no need since exon usually greater than 200bp
pos2= 0:(length(pos)-1)
pos2=(pos2-pos2[1])/(pos2[length(pos2)]-pos2[1])
fpca.rlt<- try( fpca.genotype(x,pos,nbasis=basis)  )#test the p-value
fpca.rnaseq.rlt<-cbind(fpca.rnaseq.rlt,fpca.rlt$scores)
}
}
}
fpca.rnaseq<- function(gene.list,cite.list,rnadata,basis=37,rng=0){
gene.chrom = gene.list$gene.chrom
gene.start =gene.list$gene.start
gene.end =gene.list$gene.end
snp.chrom=cite.list$chr
snp.position=cite.list$pos
geno = as.matrix(rnadata)
fpca.rnaseq.rlt<-data.frame()
if( !is.matrix(geno) ) stop('Data cannot be convert to matrix')
rlt<-data.frame( )  					#initial the result
for ( i in 1:dim(gene.list)[1]  ) {  		#Test each gene in gene.csv
sub.idx<- snp.chrom == gene.chrom[i]   	#specify the chromosome
sub.idx<- sub.idx & (snp.position > (gene.start[i] -rng) )  #choose the SNPs from the gene start minus range set before
sub.idx<- sub.idx & (snp.position < (gene.end[i] + rng) ) #choose the SNPs from the gene end plus range set before
if(length(sub.idx)>0){
x<-geno[,sub.idx]			#get the test genotype data
rlt[i,"Gene_symbol"] <- gene.list[i,4]	#record the tested gene symbol
print "gene.list[i,4]";
pos<- snp.position[sub.idx]		#get the test SNP position
x<-as.matrix(x)
if ( length(pos) >= 3 ){      # no need since exon usually greater than 200bp
pos2= 0:(length(pos)-1)
pos2=(pos2-pos2[1])/(pos2[length(pos2)]-pos2[1])
fpca.rlt<- try( fpca.genotype(x,pos,nbasis=basis)  )#test the p-value
fpca.rnaseq.rlt<-cbind(fpca.rnaseq.rlt,fpca.rlt$scores)
}
}
}
fpca.rnaseq.rlt
}
rnadata
dim(mydata)
colnames(mydata)
result<-fpca.genotype(mydata)
names(result)
dim(result$scores)
result$scores
gene.list=loc$total_gene
cite.list=loc$snp
rnadata=mydata
gene.list
cite.list
gene.chrom = gene.list$gene.chrom
gene.start =gene.list$gene.start
gene.end =gene.list$gene.end
snp.chrom=cite.list$chr
snp.position=cite.list$pos
geno = as.matrix(rnadata)
fpca.rnaseq.rlt<-data.frame()
gene.chrom
gene.start
gene.end
snp.chrom
snp.position
if( !is.matrix(geno) ) stop('Data cannot be convert to matrix')
rlt<-data.frame( )  					#initial the result
dim(gene.list)
dim(gene.list)[1]
i<-1
<-
sub.idx<- snp.chrom == gene.chrom[i]   	#specify the chromosome
sub.idx<- sub.idx & (snp.position > (gene.start[i] -rng) )  #choose the SNPs from the gene start minus range set before
rng=0
sub.idx<- snp.chrom == gene.chrom[i]   	#specify the chromosome
sub.idx<- sub.idx & (snp.position > (gene.start[i] -rng) )  #choose the SNPs from the gene start minus range set before
sub.idx<- sub.idx & (snp.position < (gene.end[i] + rng) ) #choose the SNPs from the gene end plus range set before
sub.idx
length(sub.idx)>0
sum(sub.idx)>0
fpca.rnaseq<- function(gene.list,cite.list,rnadata,basis=37,rng=0){
gene.chrom = gene.list$gene.chrom
gene.start =gene.list$gene.start
gene.end =gene.list$gene.end
snp.chrom=cite.list$chr
snp.position=cite.list$pos
geno = as.matrix(rnadata)
fpca.rnaseq.rlt<-data.frame()
if( !is.matrix(geno) ) stop('Data cannot be convert to matrix')
rlt<-data.frame( )  					#initial the result
for ( i in 1:dim(gene.list)[1]  ) {  		#Test each gene in gene.csv
sub.idx<- snp.chrom == gene.chrom[i]   	#specify the chromosome
sub.idx<- sub.idx & (snp.position > (gene.start[i] -rng) )  #choose the SNPs from the gene start minus range set before
sub.idx<- sub.idx & (snp.position < (gene.end[i] + rng) ) #choose the SNPs from the gene end plus range set before
if(sum(sub.idx)>0){
x<-geno[,sub.idx]			#get the test genotype data
rlt[i,"Gene_symbol"] <- gene.list[i,4]	#record the tested gene symbol
print "gene.list[i,4]";
pos<- snp.position[sub.idx]		#get the test SNP position
x<-as.matrix(x)
if ( length(pos) >= 3 ){      # no need since exon usually greater than 200bp
pos2= 0:(length(pos)-1)
pos2=(pos2-pos2[1])/(pos2[length(pos2)]-pos2[1])
fpca.rlt<- try( fpca.genotype(x,pos,nbasis=basis)  )#test the p-value
}
}
}
fpca.rnaseq.rlt
}
for ( i in 1:dim(gene.list)[1]  ) {  		#Test each gene in gene.csv
sub.idx<- snp.chrom == gene.chrom[i]   	#specify the chromosome
sub.idx<- sub.idx & (snp.position > (gene.start[i] -rng) )  #choose the SNPs from the gene start minus range set before
sub.idx<- sub.idx & (snp.position < (gene.end[i] + rng) ) #choose the SNPs from the gene end plus range set before
if(sum(sub.idx)>0){
x<-geno[,sub.idx]			#get the test genotype data
pos<- snp.position[sub.idx]		#get the test SNP position
x<-as.matrix(x)
if ( length(pos) >= 3 ){      # no need since exon usually greater than 200bp
pos2= 0:(length(pos)-1)
pos2=(pos2-pos2[1])/(pos2[length(pos2)]-pos2[1])
fpca.rlt<- try( fpca.genotype(x,pos,nbasis=basis)  )#test the p-value
}
}
}
fpca.rnaseq<- function(gene.list,cite.list,rnadata,basis=37,rng=0){
gene.chrom = gene.list$gene.chrom
gene.start =gene.list$gene.start
gene.end =gene.list$gene.end
snp.chrom=cite.list$chr
snp.position=cite.list$pos
geno = as.matrix(rnadata)
fpca.rnaseq.rlt<-data.frame()
if( !is.matrix(geno) ) stop('Data cannot be convert to matrix')
rlt<-data.frame( )  					#initial the result
for ( i in 1:dim(gene.list)[1]  ) {  		#Test each gene in gene.csv
sub.idx<- snp.chrom == gene.chrom[i]   	#specify the chromosome
sub.idx<- sub.idx & (snp.position > (gene.start[i] -rng) )  #choose the SNPs from the gene start minus range set before
sub.idx<- sub.idx & (snp.position < (gene.end[i] + rng) ) #choose the SNPs from the gene end plus range set before
if(sum(sub.idx)>0){
x<-geno[,sub.idx]			#get the test genotype data
pos<- snp.position[sub.idx]		#get the test SNP position
x<-as.matrix(x)
if ( length(pos) >= 3 ){      # no need since exon usually greater than 200bp
pos2= 0:(length(pos)-1)
pos2=(pos2-pos2[1])/(pos2[length(pos2)]-pos2[1])
fpca.rlt<- try( fpca.genotype(x,pos,n_of_basis=basis)  )#test the p-value
}
}
}
fpca.rnaseq.rlt
}
fpca.rnaseq.rlt
fpca.rnaseq<- function(gene.list,cite.list,rnadata,basis=37,rng=0){
gene.chrom = gene.list$gene.chrom
gene.start =gene.list$gene.start
gene.end =gene.list$gene.end
snp.chrom=cite.list$chr
snp.position=cite.list$pos
geno = as.matrix(rnadata)
fpca.rnaseq.rlt<-data.frame()
if( !is.matrix(geno) ) stop('Data cannot be convert to matrix')
rlt<-data.frame( )  					#initial the result
for ( i in 1:dim(gene.list)[1]  ) {  		#Test each gene in gene.csv
sub.idx<- snp.chrom == gene.chrom[i]   	#specify the chromosome
sub.idx<- sub.idx & (snp.position > (gene.start[i] -rng) )  #choose the SNPs from the gene start minus range set before
sub.idx<- sub.idx & (snp.position < (gene.end[i] + rng) ) #choose the SNPs from the gene end plus range set before
if(sum(sub.idx)>0){
x<-geno[,sub.idx]			#get the test genotype data
pos<- snp.position[sub.idx]		#get the test SNP position
x<-as.matrix(x)
print "sub.idx"
if ( length(pos) >= 3 ){      # no need since exon usually greater than 200bp
pos2= 0:(length(pos)-1)
pos2=(pos2-pos2[1])/(pos2[length(pos2)]-pos2[1])
fpca.rlt<- try( fpca.genotype(x,pos,n_of_basis=basis)  )#test the p-value
}
}
}
fpca.rnaseq.rlt
}
? pmatch
pmatch(c("", "ab", "ab"), c("abc", "ab"), dup=FALSE)
x<-rnorm(100,1,2)
y<-rep(1:5,each=20)
boxplot(x~y)
at<-c(1,1,2,2,3)
boxplot(x~y,at=at)
at<-c(1,1,2,2,4)
boxplot(x~y,at=at)
boxplot(x~y,at=at,boxwx=0.2)
at<-c(1,1,2,2,4)
boxplot(x~y,at=at,boxwx=0.2)
? boxplot
boxplot(x~y,at=at,boxwex=0.2)
at<-c(1,1,2,2,4,5)
boxplot(x~y,at=at,boxwex=0.2)
at<-c(1,1,2,2,4)/4
boxplot(x~y,at=at,boxwex=0.2)
at<-c(1,1,2,2,4)/5
boxplot(x~y,at=at,boxwex=0.2)
at<-c(1,1,2,2,3)/5
at<-c(1,1,2,2,3)/10
boxplot(x~y,at=at,boxwex=0.1)
at<-c(1,1,2,2,3)/9
boxplot(x~y,at=at,boxwex=0.1)
at<-c(1,1,2,2,3)/5
boxplot(x~y,at=at,boxwex=0.1)
x<-rnorm(1000,1,2)
y<-rep(1:50,each=20)
at<-c(1:50)/5
boxplot(x~y,at=at,boxwex=0.1)
at<-c(1:25)/5
boxplot(x~y,at=at,boxwex=0.1)
at<-c(rep(1:25,each=2)/5
boxplot(x~y,at=at,boxwex=0.1)
at<-c(rep(1:25,each=2))/5
boxplot(x~y,at=at,boxwex=0.1)
x<-rnorm(10000,1,2)
y<-rep(1:500,each=20)
at<-c(rep(1:250,each=2))/5
boxplot(x~y,at=at,boxwex=0.1)
paste("x",1:6,sep="")
apply(t(combn(paste("x",1:6,sep=""), 2)),1,function(x) paste(x[1],x[2],sep="+"))
? combn
setwd("/home/gsc/Dropbox/methylation")
data<-matrix(rnorm(5000,500,10))
data<-matrix(rnorm(5000),500,10)
data1<-matrix(rnorm(5000),500,10)
data1<-matrix(rnorm(5000,2,1),200,10)
data2<-matrix(rnorm(5000,5,1),500,10)
row.names(data1)<-1
row.names(data1)<-rep(1,200)
row.names(data2)<-rep(2,500)
data<-rbind(data1,data2)
save(data,file="test.RData")
gheatmap<-function(datamatrix,rowname=NULL,figuresize=17){
#usage:
#row.names= class of the samples such as cancer or normal
#row: sample
#column: gene or location
#install.packages "gplots" if without this package
library("gplots")
color.map <- function(label){
palette(rainbow(length(unique(label))))[array(data.matrix(data.frame(label)))]
}
if(! is.null(rowname)){
RowSideColors <- as.character(unlist(lapply(list(rowname), color.map)))
}else{
rowname=NULL
}
data<-as.data.frame(datamatrix)
#hclustfun = function(x) hclust(x,method = 'centroid')
pdf("heatmap.pdf",width=figuresize,height=figuresize)  #increase it when fig is big
heat<-heatmap.2(as.matrix(data),col=topo.colors(75), distfun = function(x) dist(x,method = 'euclidean'),scale="column",key=TRUE, symkey=FALSE, density.info="none", trace="none", cexRow=0.5,keysize=0.5,RowSideColors=RowSideColors)  #euclidean
dev.off()
}
gheatmap(data)
rownames(data2)<-rep(2,500)
rownames(data1)<-rep(1,200)
rowname<-rownames(data)
rowname
gheatmap(data,rowname)
rownames(data)
save(data,file="test.RData")
gheatmap(data,rownames(data))
