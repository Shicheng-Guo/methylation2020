input<-exprs(gset)
# Version info: R 3.2.3, Biobase 2.30.0, GEOquery 2.40.0, limma 3.26.8
# R scripts generated  Fri Feb 1 15:28:27 EST 2019
################################################################
#   Differential expression analysis with limma
library(Biobase)
library(GEOquery)
library(limma)
# load series and platform data from GEO
gset <- getGEO("GSE76809", GSEMatrix =TRUE, AnnotGPL=TRUE)
if (length(gset) > 1) idx <- grep("GPL6480", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
# make proper column names to match toptable
fvarLabels(gset) <- make.names(fvarLabels(gset))
# group names for all samples
gsms <- paste0("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
"XXXX1111111111111111111100000000000000000000000000",
"00000000000000000000000000000000000001100000000000",
"00000000000000000000000000000000000000000000000000",
"0000000000000000000XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
"XXXXXXXXXXXXXXX000000000011111")
sml <- c()
for (i in 1:nchar(gsms)) { sml[i] <- substr(gsms,i,i) }
# eliminate samples marked as "X"
sel <- which(sml != "X")
sml <- sml[sel]
gset <- gset[ ,sel]
# log2 transform
ex <- exprs(gset)
qx <- as.numeric(quantile(ex, c(0., 0.25, 0.5, 0.75, 0.99, 1.0), na.rm=T))
LogC <- (qx[5] > 100) ||
(qx[6]-qx[1] > 50 && qx[2] > 0) ||
(qx[2] > 0 && qx[2] < 1 && qx[4] > 1 && qx[4] < 2)
if (LogC) { ex[which(ex <= 0)] <- NaN
exprs(gset) <- log2(ex) }
# set up the data and proceed with analysis
sml <- paste("G", sml, sep="")    # set group names
fl <- as.factor(sml)
gset$description <- fl
design <- model.matrix(~ description + 0, gset)
colnames(design) <- levels(fl)
####################################
library(stats)
library(edgeR)
library("RCurl")
library("qualityTools")
library(devtools)
library(Biobase)
library(preprocessCore)
input<-exprs(gset)
newinput = normalize.quantiles(as.matrix(input))
colnames(newinput)<-colnames(input)
rownames(newinput)<-rownames(input)
hkurl <- getURL("https://raw.githubusercontent.com/CNAID/mRNA/master/Human_Housekeeping_Gene_List.txt")
hk <- read.table(text = hkurl)
GPL6480<-fData(gset)
PRID<-GPL6480[na.omit(match(hk[,2],GPL6480$GenBank.Accession)),]$ID
input.control<-newinput[match(PRID,rownames(newinput)),]
pca<-prcomp(x=na.omit(input.control))
confounders<-pca$rotation[,1:1]
levels(fl)<-c(1,0)
################################################################
#   Differential expression analysis with limma
library(Biobase)
library(GEOquery)
library(limma)
####################################
library(stats)
library(edgeR)
library("RCurl")
library("qualityTools")
library(devtools)
library(Biobase)
library(preprocessCore)
library(GEOquery)
#   Differential expression analysis with limma
library(Biobase)
library(GEOquery)
library(limma)
gset <- getGEO("GSE76809", GSEMatrix =TRUE, AnnotGPL=TRUE)
if (length(gset) > 1) idx <- grep("GPL6480", attr(gset, "names")) else idx <- 1
library(GEOquery)
install.packages("installr");
library(installr) # install+load installr
updateR() # updating R.
updateR() # updating R.
################################################################
#   Differential expression analysis with limma
library(Biobase)
library(GEOquery)
library(limma)
BiocManager::install("GEOquery", version = "3.8")
library(limma)
gset <- getGEO("GSE76809", GSEMatrix =TRUE, AnnotGPL=TRUE)
################################################################
#   Differential expression analysis with limma
library(Biobase)
library(GEOquery)
library(limma)
install.packages(purrr)
install.packages("purrr")
library(GEOquery)
library(Biobase)
library(GEOquery)
library(limma)
gset <- getGEO("GSE76809", GSEMatrix =TRUE, AnnotGPL=TRUE)
if (length(gset) > 1) idx <- grep("GPL6480", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
# make proper column names to match toptable
fvarLabels(gset) <- make.names(fvarLabels(gset))
# group names for all samples
gsms <- paste0("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
"XXXX1111111111111111111100000000000000000000000000",
"00000000000000000000000000000000000001100000000000",
"00000000000000000000000000000000000000000000000000",
"0000000000000000000XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
"XXXXXXXXXXXXXXX000000000011111")
sml <- c()
for (i in 1:nchar(gsms)) { sml[i] <- substr(gsms,i,i) }
# eliminate samples marked as "X"
sel <- which(sml != "X")
sml <- sml[sel]
gset <- gset[ ,sel]
# log2 transform
ex <- exprs(gset)
qx <- as.numeric(quantile(ex, c(0., 0.25, 0.5, 0.75, 0.99, 1.0), na.rm=T))
LogC <- (qx[5] > 100) ||
(qx[6]-qx[1] > 50 && qx[2] > 0) ||
(qx[2] > 0 && qx[2] < 1 && qx[4] > 1 && qx[4] < 2)
if (LogC) { ex[which(ex <= 0)] <- NaN
exprs(gset) <- log2(ex) }
# set up the data and proceed with analysis
sml <- paste("G", sml, sep="")    # set group names
fl <- as.factor(sml)
gset$description <- fl
design <- model.matrix(~ description + 0, gset)
colnames(design) <- levels(fl)
####################################
library(stats)
library(edgeR)
library("RCurl")
library("qualityTools")
library(devtools)
library(Biobase)
library(preprocessCore)
input<-exprs(gset)
input[1:5,1:5]
newinput = normalize.quantiles(as.matrix(input))
colnames(newinput)<-colnames(input)
rownames(newinput)<-rownames(input)
hkurl <- getURL("https://raw.githubusercontent.com/CNAID/mRNA/master/Human_Housekeeping_Gene_List.txt")
hk <- read.table(text = hkurl)
GPL6480<-fData(gset)
PRID<-GPL6480[na.omit(match(hk[,2],GPL6480$GenBank.Accession)),]$ID
input.control<-newinput[match(PRID,rownames(newinput)),]
pca<-prcomp(x=na.omit(input.control))
confounders<-pca$rotation[,1:1]
levels(fl)<-c(1,0)
table(fl)
BiocManager::install("RnBeads", version = "3.8")
library("RnBeads")
working_dir = "C:\\Users\\guosa\\Downloads\\idat"
library("doParallel")
library("RnBeads")
logger.start(fname=NA)
num.cores=8
parallel.setup(num.cores)
data.dir = working_dir
control.annotation <- rnb.get.annotation("controls450")
library("RnBeads.hg19")
BiocManager::install("RnBeads.hg19", version = "3.8")
control.annotation <- rnb.get.annotation("controls450")
control.annotation
x<-rnorm(100)
x2<-rep(c(1,2),50)
x1<-rnorm(100)
y<-rnorm(100)
lm(y~x1+x2)
lm(y~x1+as.factor(x2))
x1<-rnorm(150)
x2<-rep(c(1,2,3),50)
y<-rnorm(150)
lm(y~x1+as.factor(x2))
lm(y~x1+x2)
lm(y~x1+as.factor(x2))
x1<-rnorm(150)
x2<-rep(c(1,2),75)
y<-rnorm(150)
lm(y~x1+x2)
lm(y~x1+as.factor(x2))
tim(test1)
time(test1)
test1<-function(x){
x1<-rnorm(150)
x2<-rep(c(1,2),75)
y<-rnorm(150)
lm(y~x1+x2)
}
test2<-function(x){
x1<-rnorm(150)
x2<-rep(c(1,2),75)
y<-rnorm(150)
lm(y~x1+as.factor(x2))
}
time(test1)
x1<-rnorm(150)
x2<-rep(c(1,2),75)
y<-rnorm(150)
lm(y~x1+x2)
test1<-function(x){
x1<-rnorm(150)
x2<-rep(c(1,2),75)
y<-rnorm(150)
lm(y~x1+x2)
}
time(test1(1))
start_time <- Sys.time()
for(1:100){
time(test1(1))
}
start_time <- Sys.time()
for(i in 1:100){
time(test1(1))
}
end_time <- Sys.time()
end_time - start_time
start_time <- Sys.time()
for(i in 1:100){
time(test1(1))
}
end_time <- Sys.time()
end_time - start_time
start_time <- Sys.time()
for(i in 1:100){
time(test2(1))
}
end_time <- Sys.time()
end_time - start_time
start_time <- Sys.time()
for(i in 1:100){
time(test1(1))
}
end_time <- Sys.time()
end_time - start_time
start_time <- Sys.time()
for(i in 1:100){
time(test2(1))
}
end_time <- Sys.time()
end_time - start_time
start_time <- Sys.time()
for(i in 1:100){
time(test1(1))
}
end_time <- Sys.time()
end_time - start_time
start_time <- Sys.time()
for(i in 1:100){
time(test2(1))
}
end_time <- Sys.time()
end_time - start_time
start_time <- Sys.time()
for(i in 1:100){
time(test1(1))
}
end_time <- Sys.time()
end_time - start_time
start_time <- Sys.time()
for(i in 1:100){
time(test2(1))
}
end_time <- Sys.time()
end_time - start_time
start_time <- Sys.time()
for(i in 1:100){
time(test1(1))
}
end_time <- Sys.time()
end_time - start_time
start_time <- Sys.time()
for(i in 1:100){
time(test2(1))
}
end_time <- Sys.time()
end_time - start_time
start_time <- Sys.time()
for(i in 1:100){
time(test1(1))
}
end_time <- Sys.time()
end_time - start_time
start_time <- Sys.time()
for(i in 1:100){
time(test2(1))
}
end_time <- Sys.time()
end_time - start_time
start_time <- Sys.time()
for(i in 1:100){
time(test1(1))
}
end_time <- Sys.time()
end_time - start_time
start_time <- Sys.time()
for(i in 1:100){
time(test2(1))
}
end_time <- Sys.time()
end_time - start_time
start_time <- Sys.time()
for(i in 1:100){
time(test1(1))
}
end_time <- Sys.time()
end_time - start_time
start_time <- Sys.time()
for(i in 1:100){
time(test2(1))
}
end_time <- Sys.time()
end_time - start_time
start_time <- Sys.time()
for(i in 1:1000){
time(test1(1))
}
end_time <- Sys.time()
end_time - start_time
start_time <- Sys.time()
for(i in 1:1000){
time(test2(1))
}
end_time <- Sys.time()
end_time - start_time
setwd("//mcrfnas2/bigdata/Genetic/Projects/shg047/methylation/GBM/GEO")
load("error.RData")
par(cex.lab=1.5,cex.axis=1.5)
barplot(error)
barplot(error,col=1:20)
barplot(1-error,col=1:20)
barplot(error,col=1:20)
barplot(error,col=1:20,ylim=c(0,0.05))
barplot(error,col=1:20,ylim=c(0,0.05),ylab="OOB error rate")
barplot(error,col=1:20,ylim=c(0,0.05),ylab="OOB error rate",xlab="Number of Variables in the prediction model")
barplot(error,col=1:20,ylim=c(0,0.05),ylab="OOB error rate",xlab="Number of variables in the prediction model")
load("MCRI.GBM.RandomForest.RData")
model
model
model$call
model$terms
model$confusion
model$err.rate
load("error.3.RData")
par(cex.lab=1.5,cex.axis=1.5)
barplot(error,col=1:20,ylim=c(0,0.4),ylab="OOB error rate",xlab="Number of variables in the prediction model")
load("MCRI.GBM.OS.HR.1388.RData")
load("//mcrfnas2/bigdata/Genetic/Projects/shg047/methylation/Pancancer/MCRI.GBM.OS.HR.1388.RData")
head(newrlt)
library("Haplin")
pQQ(newrlt[,5], nlabs =nrow(newrlt), conf = 0.95)
load("//mcrfnas2/bigdata/Genetic/Projects/shg047/methylation/Pancancer/MCRI.GBM.OS.HR.395788.RData")
head(rlt)
pQQ(newrlt[,5], nlabs =nrow(newrlt), conf = 0.95)
pQQ(rlt[,5], nlabs =nrow(newrlt), conf = 0.95)
pQQ(rlt[,5], nlabs =nrow(rlt), conf = 0.95)
dim(rlt)
0.05/395788
min(rlt[,5])
head(newrlt)
xx<-newrlt[order(newrlt[,5],deceasing=F),]
xx<-newrlt[order(newrlt[,5],deceasing=F),]
xx<-newrlt[order(newrlt[,5],deceasing=F),]
dim(newrlt)
order(newrlt[,5],deceasing=F)
head(newrlt)
newrlt[,5]
order(newrlt[,5])
order(newrlt[,5],decreasing = F)
xx<-newrlt[order(newrlt[,5],decreasing = F),]
head(xx)
head(xx,n=10)
head(xx,n=11)
xx<-rlt[order(rlt[,5],decreasing = F),]
head(xx)
head(xx,n=20)
legend(x="topright", col=2:3, lwd=2, legend=c("Hyper","Hypo"),xlab="Month")
load("cg04866162.HR.OS.RData")
load("cg04866162.HR.OS.RData")
getwd()
load("cg04866162.HR.OS.RData")
plot(KM0, xlab="Month", ylab="Survival", lwd=2, col=2:3)
plot(HR$KM0,xlab="t", ylab="Survival", lwd=2)
load("cg04866162.HR.OS.RData")
HR$KM0
plot(HR$KM0,xlab="t", ylab="Survival", lwd=2)
plot(HR$KM, xlab="Month", ylab="Survival", lwd=2, col=2:3)
load("cg04866162.HR.OS.RData")
plot(HR$KM0,xlab="t", ylab="Survival", lwd=2)
getwd()
load("cg04866162.HR.OS.RData")
plot(KM, xlab="Month", ylab="Survival", lwd=2, col=2:3)
plot(HR$KM, xlab="Month", ylab="Survival", lwd=2, col=2:3)
KM<-HR$KM
plot(KM, xlab="Month", ylab="Survival", lwd=2, col=2:3)
load("cg04866162.HR.OS.RData")
dat<-HR$dat
KM<-HR$KM
KM0<-HR$KM0
plot(KM0, xlab="Month", ylab="Survival", lwd=2, col=2:3)
plot(KM0, xlab="Month", ylab="Survival", lwd=2, col=1)
KM0 <- survfit(Surv(month,censored)~1,  type="kaplan-meier", conf.type="log", data=dat)
KM <- survfit(Surv(month,censored)~Rna, type="kaplan-meier", conf.type="log", data=dat)
library(survival)
KM0 <- survfit(Surv(month,censored)~1,  type="kaplan-meier", conf.type="log", data=dat)
KM <- survfit(Surv(month,censored)~Rna, type="kaplan-meier", conf.type="log", data=dat)
plot(KM0, xlab="Month", ylab="Survival", lwd=2, col=1)
plot(KM, xlab="Month", ylab="Survival", lwd=2, col=2:3)
plot(KM0, xlab="Month", ylab="Survival", lwd=2, col=1)
plot(KM, xlab="Month", ylab="Survival", lwd=2, col=2:3)
plot(KM, xlab="Month", ylab="Survival", lwd=2, col=2:3)
legend(x="topright", col=2:3, lwd=2, legend=c("Hyper","Hypo"))
plot(KM, xlab="Month", ylab="Survival", lwd=2, col=2:3)
legend(x="topright", col=2:3, lwd=2, legend=c("Hypo","Hyper"))
par(cex.lab=1.5,cex.axis=1.5)
plot(KM, xlab="Month", ylab="Survival", lwd=2, col=2:3)
legend(x="topright", col=2:3, lwd=2, legend=c("Hypo","Hyper"))
legend(x="topright", col=2:3, lwd=2, legend=c("Hypo","Hyper"),bty="n")
plot(KM, xlab="Month", ylab="Survival", lwd=2, col=2:3)
legend(x="topright", col=2:3, lwd=2, legend=c("Hypo","Hyper"),bty="n")
plot(KM, xlab="Month", ylab="Survival", lwd=2, col=2:3,cex=1.5)
legend(x="topright", col=2:3, lwd=2, legend=c("Hypo","Hyper"),bty="n")
dev.off()
plot(KM, xlab="Month", ylab="Survival", lwd=2, col=2:3,cex=1.5)
legend(x="topright", col=2:3, lwd=2, legend=c("Hypo","Hyper"),bty="n")
plot(KM, xlab="Month", ylab="Survival", lwd=3, col=2:3,cex=1.5)
plot(KM, xlab="Month", ylab="Survival", lwd=4, col=2:3,cex=1.5)
legend(x="topright", col=2:3, lwd=3, legend=c("Hypo","Hyper"),bty="n")
legend(x="topright", col=2:3, lwd=3, legend=c("Hypo","Hyper"),bty="n",cex=1.5)
plot(KM, xlab="Month", ylab="Survival", lwd=4, col=2:3,cex=1.5)
legend(x="topright", col=2:3, lwd=3, legend=c("Hypo","Hyper"),bty="n",cex=1.5)
par(cex.lab=2,cex.axis=2)
plot(KM, xlab="Month", ylab="Survival", lwd=4, col=2:3,cex=1.5)
par(cex.lab=1.5,cex.axis=1.5)
plot(KM, xlab="Month", ylab="Survival", lwd=4, col=2:3,cex=1.5)
legend(x="topright", col=2:3, lwd=3, legend=c("Hypo","Hyper"),bty="n",cex=1.5)
GBMOS<-read.table("https://github.com/Shicheng-Guo/HowtoBook/blob/master/TCGA/gbm/prognostic_glioma_Favourable_68_Gene.txt")
GBMOS<-read.table("https://github.com/Shicheng-Guo/HowtoBook/blob/master/TCGA/gbm/prognostic_glioma_Favourable_68_Gene.txt",sep="\t")
GBMOS<-read.table("https://raw.githubusercontent.com/Shicheng-Guo/HowtoBook/master/TCGA/gbm/prognostic_glioma_Favourable_68_Gene.txt",sep="\t")
load("//mcrfnas2/bigdata/Genetic/Projects/shg047/methylation/GBM/GEO/beta.3385.RData")
data<-read.table("MCRI.GBM.3358.marker.txt")
beta<-GBM$beta
phen<-GBM$phen
beta<-na.omit(beta[match(rownames(data),rownames(beta)),])
plot(KM, xlab="Month", ylab="Survival", lwd=4, col=2:3,cex=1.5)
legend(x="topright", col=2:3, lwd=3, legend=c("Hyper","Hypo"),bty="n",cex=1.5)
load("OS.HR.LGG.RData")
pQQ(newrlt[,5], nlabs =nrow(rlt), conf = 0.95)
pQQ(newrlt[,5], nlabs =nrow(newrlt), conf = 0.95)
dim(newrlt)
head(newrlt)
pQQ(newrlt[,5], nlabs =nrow(newrlt), conf = 0.95)
dim(rlt)
pQQ(newrlt[,5], nlabs =nrow(rlt), conf = 0.95)
pQQ(newrlt[,5], nlabs =nrow(rlt), conf = 0.95)
pQQ(newrlt[,5], nlabs =nrow(newrlt), conf = 0.95)
GBM<-read.table("TCGA_HM450_GBM_Suvival_HR.txt",head=T)
GBM<-read.table("TCGA_HM450_GBM_Suvival_HR.txt",head=T,sep="\t")
GBM<-read.table("//mcrfnas2/bigdata/Genetic/Projects/shg047/methylation/TCGA_HM450_GBM_Suvival_HR.txt",head=T,sep="\t")
LGG<-read.table("//mcrfnas2/bigdata/Genetic/Projects/shg047/methylation/TCGA_HM450_LGG_Suvival_HR.txt",head=T,sep="\t")
data<-read.table("MCRI.GBM.3358.marker.txt")
head(GBM)
head(LGG)
pQQ(GBM[,5], nlabs =nrow(GBM), conf = 0.95)
GBM<-na.omit(GBM)
LGG<-na.omit(LGG)
pQQ(GBM[,5], nlabs =nrow(GBM), conf = 0.95)
head(GBM)
GBM<-read.table("//mcrfnas2/bigdata/Genetic/Projects/shg047/methylation/TCGA_HM450_GBM_Suvival_HR.txt",head=T,sep="\t",row.names = 1)
LGG<-read.table("//mcrfnas2/bigdata/Genetic/Projects/shg047/methylation/TCGA_HM450_LGG_Suvival_HR.txt",head=T,sep="\t",row.names = 1)
data<-read.table("MCRI.GBM.3358.marker.txt")
GBM<-na.omit(GBM)
LGG<-na.omit(LGG)
head(GBM)
head(LGG)
pQQ(GBM[,5], nlabs =nrow(GBM), conf = 0.95)
pQQ(LGG[,5], nlabs =nrow(LGG), conf = 0.95)
HR<-c()
for(i in 1:nrow(newdata)){
dat<-data.frame(Rna=newdata[i,],phen)
dat$Rna[dat$Rna<=0.3]<-0
dat$Rna[dat$Rna>0.3]<-1
hr<-summary(coxph(Surv(month,censored)~Rna,dat))$coefficients[1,]
HR<-rbind(HR,hr)
print(i)
}
dim(LGG)
pQQ(LGG[sample(1:157133,300),5], nlabs =300, conf = 0.95)
pQQ(LGG[sample(1:157133,300),5], nlabs =100, conf = 0.95)
pQQ(LGG[sample(1:157133,300),5]*10^4, nlabs =100, conf = 0.95)
pQQ(GBM[,5], nlabs =nrow(GBM), conf = 0.95)
dim(GBM)
pQQ(GBM[sample(1:153431,3000),5], nlabs =3000, conf = 0.95)
pQQ(GBM[sample(1:153431,3000),5], nlabs =3000, conf = 0.95)
dim(GBM)
load("cg00026222.HR.OS.RData")
dat<-HR$dat
KM<-HR$KM
par(cex.lab=1.5,cex.axis=1.5)
plot(KM, xlab="Month", ylab="Survival", lwd=4, col=2:3,cex=1.5)
legend(x="topright", col=2:3, lwd=3, legend=c("Hyper","Hypo"),bty="n",cex=1.5)
23800/1688780
16700/600920
